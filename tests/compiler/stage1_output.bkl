(include "compiler.bkl")

(define s1-transform
 (lambda (val)
   (let ((root-env (spawn-root-env)))
     (stage1-transformator
      val
      {env:         root-env
       include-dir: "bukalisplib"}
      {root-env:    root-env
       var-counter: 0}))))

;
;(stage1-transformator
; '(begin (define x x)
;         (define (f a b) (set! a 10) a)
;         10
;         x
;         (+ 1 2)
;         (when (= 1 2) 20))
; {env: root-env}
; { root-env: root-env var-counter: 0 })

(define T
  (lambda (code expected)
    (let ((r (s1-transform code)))
      (if (eqv? (write-str r) (write-str expected))
        (displayln (str "OK - " code))
        (error (str "Test failed: " code ", returned:\n" (pp-str r) "\n!=\n" (pp-str expected)))))))

;----------------------------------------------------------------------------

;----------------------------------------------------------------------------

(T '1     '(#1#data 1))
(T '"foo" '(#1#data "foo"))
(T ''foo  '(#1#data foo))
(T 'foo:  '(#1#data foo:))

(T '(map? 1)
   '(#1#apply
     (#1#prim map?)
     ((#1#data 1))))
(T '(let ((a +)) (a 1 2))
    '(#1#let (a_0)
      (#1#begin
       (#1#set! (#1#var a_0 a) (#1#prim +))
       (#1#apply (#1#var a_0 a)
        ((#1#data 1) (#1#data 2))))))
(T '(begin
      (define x 10)
      x)
   '(#1#begin
     (#1#set! (#1#glob-var x 0) (#1#data 10))
     (#1#glob-var x 0)))
(T '(begin
      (define x 10)
      (set! x 20)
      x)
   '(#1#begin
     (#1#set! (#1#glob-var x 0) (#1#data 10))
     (#1#set! (#1#glob-var x 0) (#1#data 20))
     (#1#glob-var x 0)))
(T '(begin
      (define (x a b) b)
      x)
    '(#1#begin
      (#1#set! (#1#glob-var x 0)
       (#1#lambda (x (a_0 b_1) nil nil #f)
        (#1#var b_1 b)))
      (#1#glob-var x 0)))
(T '(if #t 1 2)
   '(#1#if
     (#1#data #true)
     (#1#data 1)
     (#1#data 2)))
(T '(if #t 1)
   '(#1#if (#1#data #true) (#1#data 1) (#1#nil)))
(T '(when #f 22)
   '(#1#if (#1#data #false) (#1#data 22) (#1#nil)))
(T '(when #f 22 33)
   '(#1#if (#1#data #false) (#1#begin (#1#data 22) (#1#data 33)) (#1#nil)))
(T '(unless #f 33)
   '(#1#if (#1#not (#1#data #false)) (#1#data 33) (#1#nil)))

; Test lambda expressions:
(T '(lambda (x) (lambda (y) (+ x y)))
   '(#1#lambda (nil (x_0) nil nil #f)
     (#1#create-upv lambda: (x_0)
      (#1#lambda (nil (y_1) nil (x_0) #f)
       (#1#add (#1#var x_0 x) (#1#var y_1 y))))))
(T '(lambda (x) (lambda (v) (lambda (y) (+ x y v))))
   '(#1#lambda (nil (x_0) nil nil #f)
     (#1#create-upv lambda: (x_0)
      (#1#lambda (nil (v_1) nil (x_0) #f)
       (#1#create-upv lambda: (v_1)
        (#1#lambda (nil (y_2) nil (v_1 x_0) #f)
         (#1#add
          (#1#add (#1#var x_0 x) (#1#var y_2 y)) (#1#var v_1 v))))))))
(T '(lambda x x)
   '(#1#lambda (nil () x_0 nil #f) (#1#var x_0 x)))
(T '(lambda (. x) x)
   '(#1#lambda (nil () x_0 nil #f) (#1#var x_0 x)))
(T '(lambda (y . x) x)
   '(#1#lambda (nil (y_0) x_1 nil #f) (#1#var x_1 x)))
(T '(lambda (a y . x) x)
   '(#1#lambda (nil (a_0 y_1) x_2 nil #f) (#1#var x_2 x)))
(T '(define (foo . x)
      x)
   '(#1#set! (#1#glob-var foo 0)
     (#1#lambda (foo () x_0 nil #f) (#1#var x_0 x))))

; Test quoting:
(T ''1 '(#1#data 1))
(T ''(1 2 3) '(#1#list (#1#data 1) (#1#data 2) (#1#data 3)))
(T ''(1 ,(+ 1 2) 3)
   '(#1#list (#1#data 1)
     (#1#list (#1#data unquote)
      (#1#list (#1#data +)
               (#1#data 1)
               (#1#data 2)))
     (#1#data 3)))
(T ''"foo" '(#1#data "foo"))
(T ''foo:  '(#1#data foo:))
(T '(begin 1 (return 2) 2)
   '(#1#begin (#1#data 1) (#1#return (#1#data 2)) (#1#data 2)))
(T '(begin 1 (yield 2) 2)
   '(#1#begin (#1#data 1) (#1#yield (#1#data 2)) (#1#data 2)))
(T '(@1 [1 2])
   '(#1#get (#1#data 1)
     (#1#list (#1#data 1)
      (#1#data 2))))
(T '(@!1 [1 2] x:)
   '(#1#set field: (#1#data 1)
     (#1#list (#1#data 1)
      (#1#data 2))
     (#1#data x:)))
(T '(let ((x 10)) x)
   '(#1#let (x_0)
     (#1#begin
      (#1#set! (#1#var x_0 x) (#1#data 10))
      (#1#var x_0 x))))
(T '(let ((x 10) (y (+ x 10))) (+ x y))
  '(#1#let (x_0 y_1)
    (#1#begin
     (#1#set! (#1#var x_0 x) (#1#data 10))
     (#1#set! (#1#var y_1 y)
      (#1#add (#1#var x_0 x)
       (#1#data 10)))
     (#1#add (#1#var x_0 x)
      (#1#var y_1 y)))))
(T '(include "..\\tests\\compiler\\stage1_out_incl.bkl")
   '(#1#begin
     (#1#data test-include:)
     (#1#apply (#1#prim str)
               ((#1#data x:)
                (#1#apply (#1#prim str)
                          ((#1#data f:)
                           (#1#data y:)))
                (#1#data "foobar")))))

; Test upvalue calculations:
(T '(lambda ()
      (define y 20)
      (lambda () y))
   '(#1#lambda (nil () nil nil #f)
     (#1#let (y_0)
      (#1#create-upv
      lambda:
      (y_0)
      (#1#begin (#1#set! (#1#var y_0 y) (#1#data 20))
       (#1#lambda (nil () nil (y_0) #f) (#1#var y_0 y)))))))

(T '(let ((x 10))
      (define y 20)
      (lambda () y))
   '(#1#let (x_0 y_1)
     (#1#create-upv
      let:
      (y_1)
      (#1#begin (#1#set! (#1#var x_0 x) (#1#data 10))
       (#1#begin (#1#set! (#1#var y_1 y) (#1#data 20))
        (#1#lambda (nil () nil (y_1) #f) (#1#var y_1 y)))))))

(T '(lambda ()
      (let ((x 20) (y 2))
        (lambda (b) x)
        y))
  '(#1#lambda (nil () nil nil #f)
    (#1#let (x_0 y_1)
     (#1#create-upv let: (x_0)
      (#1#begin
       (#1#set! (#1#var x_0 x) (#1#data 20))
       (#1#set! (#1#var y_1 y) (#1#data 2))
       (#1#begin
        (#1#lambda (nil (b_2) nil (x_0) #f)
         (#1#var x_0 x))
        (#1#var y_1 y)))))))

(T '(lambda (x)
      (lambda (b)
        x))
   '(#1#lambda (nil (x_0) nil nil #f)
     (#1#create-upv lambda: (x_0)
      (#1#lambda (nil (b_1) nil (x_0) #f)
       (#1#var x_0 x)))))

; Testing error debug info (line numbers):
(let ((inc-trans (s1-transform '(include "..\\tests\\compiler\\stage1_out_incl.bkl"))))
  #;(displayln (bkl-get-meta (@1 (@2 (@2 inc-trans)))))
  (when (not (= (@1 (@0 (bkl-get-meta (@1 inc-trans)))) 1))
    (error "Include file first statement wrong line (stage1_out_incl.bkl)"))
  (when (not (= (@1 (@0 (bkl-get-meta (@2 inc-trans)))) 2))
    (error "Include file second statement wrong line (stage1_out_incl.bkl)"))
  (when (not (= (@1 (@0 (bkl-get-meta (@1 (@2 (@2 inc-trans)))))) 3))
    (error "Include deep statement wrong line (stage1_out_incl.bkl)")))

; Test macros:
(T '(let ((k 11))
      (define-macro (x a b)
                    ['quote [a b a b]])
      (x 9 k))
   '(#1#let (k_0)
     (#1#begin (#1#set! (#1#var k_0 k) (#1#data 11))
      (#1#begin
       (#1#nil)
       (#1#list (#1#data 9) (#1#data k) (#1#data 9) (#1#data k))))))

; Test macros:
(T '(begin
     (define-macro (x a b)
      ['+ a b])
     (x 9 (x 1 2)))
   '(#1#begin
     (#1#nil)
      (#1#add (#1#data 9)
       (#1#add (#1#data 1) (#1#data 2)))))

; Test primitive optimizations:
(T '(+ 1 2)      '(#1#add (#1#data 1) (#1#data 2)))
(T '(+ 1)        '(#1#add (#1#data 0) (#1#data 1)))
(T '(+ 1 2 3)    '(#1#add (#1#add (#1#data 1) (#1#data 2)) (#1#data 3)))
(T '(- 1 2 3)    '(#1#sub (#1#sub (#1#data 1) (#1#data 2)) (#1#data 3)))
(T '(- 2)        '(#1#sub (#1#data 0) (#1#data 2)))
(T '(* 1 2 3)    '(#1#mul (#1#mul (#1#data 1) (#1#data 2)) (#1#data 3)))
(T '(* 2)        '(#1#mul (#1#data 1) (#1#data 2)))
(T '(/ 1 2 3)    '(#1#div (#1#div (#1#data 1) (#1#data 2)) (#1#data 3)))
(T '(/ 2)        '(#1#div (#1#data 1) (#1#data 2)))
(T '(= 1 2 3)    '(#1#if (#1#not (#1#eq (#1#data 1) (#1#data 2)))
                   (#1#data #false)
                   (#1#eq (#1#data 2) (#1#data 3))))
(T '(= 1 2)      '(#1#eq (#1#data 1) (#1#data 2)))
(T '(< 1 2 3)    '(#1#if (#1#not (#1#lt (#1#data 1) (#1#data 2)))
                   (#1#data #false)
                   (#1#lt (#1#data 2) (#1#data 3))))
(T '(< 1 2)      '(#1#lt (#1#data 1) (#1#data 2)))
(T '(> 1 2 3)    '(#1#if (#1#not (#1#gt (#1#data 1) (#1#data 2)))
                   (#1#data #false)
                   (#1#gt (#1#data 2) (#1#data 3))))
(T '(> 1 2)      '(#1#gt (#1#data 1) (#1#data 2)))
(T '(<= 1 2 3)   '(#1#if (#1#not (#1#le (#1#data 1) (#1#data 2)))
                   (#1#data #false)
                   (#1#le (#1#data 2) (#1#data 3))))
(T '(<= 1 2)     '(#1#le (#1#data 1) (#1#data 2)))
(T '(>= 1 2 3)   '(#1#if (#1#not (#1#ge (#1#data 1) (#1#data 2)))
                   (#1#data #false)
                   (#1#ge (#1#data 2) (#1#data 3))))
(T '(>= 1 2)     '(#1#ge (#1#data 1) (#1#data 2)))

; Test result from list as function for apply:
(T '((let ((x @)) x) x: { x: 10 })
   '(#1#apply (#1#let (x_0)
               (#1#begin (#1#set! (#1#var x_0 x) (#1#prim @))
                (#1#var x_0 x)))
     ((#1#data x:) (#1#map ((#1#data x:) (#1#data 10))))))

; Test map:
(T '{} '(#1#map))
(T '{1 1} '(#1#map ((#1#data 1) (#1#data 1))))
(T ''{1 1} '(#1#map ((#1#data 1) (#1#data 1))))
(T '{(+ 1 2) 1}  '(#1#map ((#1#add (#1#data 1) (#1#data 2)) (#1#data 1))))
(T ''{(+ 1 2) 1} '(#1#map ((#1#list (#1#data +) (#1#data 1) (#1#data 2))
                           (#1#data 1))))

; Test get keyword from map
(T '(@x: { x: 10 }) '(#1#get (#1#data x:) (#1#map ((#1#data x:) (#1#data 10)))))
(T '(x: { x: 10 })  '(#1#get (#1#data x:) (#1#map ((#1#data x:) (#1#data 10)))))

; Test method definition
(T '($define! {} (foo) 0)
   '(#1#set method: (#1#data foo)
     (#1#map)
     (#1#lambda (foo () nil nil #f) (#1#data 0))))
(T '($define! {} (foo a b c) (+ a b c))
   '(#1#set method: (#1#data foo)
     (#1#map)
     (#1#lambda (foo (a_0 b_1 c_2) nil nil #f)
      (#1#add (#1#add (#1#var a_0 a) (#1#var b_1 b))
       (#1#var c_2 c)))))

; Method calls:
(T '(.test {} 1 2 3)
   '(#1#method-call test (#1#map)
     (#1#data 1) (#1#data 2) (#1#data 3)))
(T '(.test {})          '(#1#method-call test (#1#map)))
(T '(.(str "x" "y") {})
   '(#1#method-call
     (#1#apply (#1#prim str)
      ((#1#data "x") (#1#data "y")))
     (#1#map)))

; Test global defines:
(T '(define x   10)
   '(#1#set! (#1#glob-var x 0) (#1#data 10)))
(T '(begin
      (define x 10)
      (define y 10)
      (let ((x 20))
        (lambda () x y)))
   '(#1#begin (#1#set! (#1#glob-var x 0) (#1#data 10))
     (#1#set! (#1#glob-var y 1) (#1#data 10))
     (#1#let (x_0)
      (#1#create-upv
       let:
       (x_0)
       (#1#begin (#1#set! (#1#var x_0 x) (#1#data 20))
        (#1#lambda (nil () nil (x_0) #f)
         (#1#begin (#1#var x_0 x) (#1#glob-var y 1))))))))
(T '(define (x) x)
   '(#1#set! (#1#glob-var x 0)
     (#1#lambda (x () nil nil #f) (#1#glob-var x 0))))
(T '(begin
      (define x 10)
      x)
   '(#1#begin (#1#set! (#1#glob-var x 0) (#1#data 10))
     (#1#glob-var x 0)))

; Test do-each with global variables and stuff to test them:
(T '(do-each (i v [1 2 3 4])
      (+ i 1)
      (- v 20))
   '(#1#let (i_0 v_1)
     (#1#begin
      (#1#set! (#1#var i_0 i) (#1#nil))
      (#1#set! (#1#var v_1 v) (#1#nil))
      (#1#do-each ((#1#var v_1 v) (#1#var i_0 i))
       (#1#list (#1#data 1) (#1#data 2) (#1#data 3) (#1#data 4))
       (#1#begin (#1#add (#1#var i_0 i) (#1#data 1))
        (#1#sub (#1#var v_1 v) (#1#data 20)))))))
(T '(begin
      (define x 10)
      (do-each (i v [])
        (lambda () (+ x v))))
   '(#1#begin (#1#set! (#1#glob-var x 0) (#1#data 10))
     (#1#let (i_0 v_1)
      (#1#create-upv
       let:
       (v_1)
       (#1#begin (#1#set! (#1#var i_0 i) (#1#nil))
        (#1#set! (#1#var v_1 v) (#1#nil))
        (#1#do-each ((#1#var v_1 v) (#1#var i_0 i))
         (#1#list)
         (#1#lambda (nil () nil (v_1) #f)
          (#1#add (#1#glob-var x 0) (#1#var v_1 v)))))))))
(T '(do-each (i v [1 2 3 4])
      (lambda () (* 2 i)))
   '(#1#let (i_0 v_1)
      (#1#create-upv let: (i_0)
       (#1#begin (#1#set! (#1#var i_0 i) (#1#nil))
        (#1#set! (#1#var v_1 v) (#1#nil))
        (#1#do-each ((#1#var v_1 v) (#1#var i_0 i))
         (#1#list (#1#data 1) (#1#data 2) (#1#data 3) (#1#data 4))
         (#1#lambda (nil () nil (i_0) #f)
          (#1#mul (#1#data 2) (#1#var i_0 i))))))))

(T '(do-each (v {a: 10})
      v)
   '(#1#let (v_0)
     (#1#begin (#1#set! (#1#var v_0 v) (#1#nil))
      (#1#do-each ((#1#var v_0 v))
       (#1#map ((#1#data a:) (#1#data 10)))
       (#1#var v_0 v)))))

; Test some logix optimized primitives:
(T '(not #f)
   '(#1#not (#1#data #false)))

; Test 'and' and 'or'
(T '(or 1 2 3)
   '(#1#let (or_0_t_1)
     (#1#begin
      (#1#set! (#1#var or_0_t_1 or_0_t) (#1#data 1))
      (#1#if (#1#var or_0_t_1 or_0_t)
       (#1#var or_0_t_1 or_0_t)
       (#1#begin
        (#1#set! (#1#var or_0_t_1 or_0_t) (#1#data 2))
        (#1#if (#1#var or_0_t_1 or_0_t)
         (#1#var or_0_t_1 or_0_t)
         (#1#begin
          (#1#set! (#1#var or_0_t_1 or_0_t) (#1#data 3))
          (#1#if (#1#var or_0_t_1 or_0_t) (#1#var or_0_t_1 or_0_t) (#1#data #false)))))))))

(T '(or 1)
   '(#1#let (or_0_t_1)
     (#1#begin (#1#set! (#1#var or_0_t_1 or_0_t) (#1#data 1))
      (#1#if
       (#1#var or_0_t_1 or_0_t)
       (#1#var or_0_t_1 or_0_t)
       (#1#data #false)))))

(T '(and 1)
   '(#1#let (and_0_t_1)
     (#1#begin
      (#1#set! (#1#var and_0_t_1 and_0_t) (#1#data 1))
      (#1#if (#1#var and_0_t_1 and_0_t) (#1#var and_0_t_1 and_0_t) (#1#data #false)))))

(T '(and 1 2)
   '(#1#let (and_0_t_1)
     (#1#begin
      (#1#set! (#1#var and_0_t_1 and_0_t) (#1#data 1))
      (#1#if (#1#var and_0_t_1 and_0_t)
       (#1#begin
        (#1#set! (#1#var and_0_t_1 and_0_t) (#1#data 2))
        (#1#if (#1#var and_0_t_1 and_0_t) (#1#var and_0_t_1 and_0_t) (#1#data #false)))
       (#1#data #false)))))

; Test apply optimization for list:
(T ''(1 2 3) '(#1#list (#1#data 1) (#1#data 2) (#1#data 3)))
(T '[1 2 3]  '(#1#list (#1#data 1) (#1#data 2) (#1#data 3)))

; Test 'cond' syntax:
(T '(cond
      ((= 0 1) (+ 1 2) 3)
      ((= 2 3) => (lambda (x) (+ x 4)))
      (else 23))
   '(#1#cond
     (clause: (#1#eq (#1#data 0) (#1#data 1))
              (#1#begin
               (#1#add (#1#data 1) (#1#data 2))
               (#1#data 3)))
     (#1#let (cond_0_t_1)
      (#1#begin
       (#1#set! (#1#var cond_0_t_1 cond_0_t)
        (#1#eq (#1#data 2) (#1#data 3)))
       (clause: (#1#var cond_0_t_1 cond_0_t)
         (#1#apply (#1#lambda (nil (x_2) nil nil #f)
                    (#1#add (#1#var x_2 x) (#1#data 4)))
          ((#1#var cond_0_t_1 cond_0_t))))))
     (else: (#1#data 23))))

(T '(cond ((= 0 0) 1))
   '(#1#cond
     (clause: (#1#eq (#1#data 0) (#1#data 0)) (#1#data 1))
     (else: (#1#nil))))

(T '(cond (else 1))
   '(#1#cond (else: (#1#data 1))))

; Testing 'case'
(T '(case 'foo
      ((a b) 1 2 3)
      ((foo) 3))
   '(#1#let (case_0_t_1)
     (#1#begin
      (#1#set! (#1#var case_0_t_1 case_0_t) (#1#data foo))
      (#1#cond
       (clause: (#1#eqv (#1#var case_0_t_1 case_0_t) (#1#data a))
                (#1#begin (#1#data 1) (#1#data 2) (#1#data 3)))
       (clause: (#1#eqv (#1#var case_0_t_1 case_0_t) (#1#data b))
                (#1#begin (#1#data 1) (#1#data 2) (#1#data 3)))
       (clause: (#1#eqv (#1#var case_0_t_1 case_0_t) (#1#data foo))
                (#1#data 3))))))

(T '(case 'foo (else 1 2 3))
   '(#1#let (case_0_t_1)
     (#1#begin
      (#1#set! (#1#var case_0_t_1 case_0_t) (#1#data foo))
      (#1#cond
       (else: (#1#begin (#1#data 1) (#1#data 2) (#1#data 3)))))))

(T '(case 'foo (else => (lambda (x) x)))
   '(#1#let (case_0_t_1)
     (#1#begin
      (#1#set! (#1#var case_0_t_1 case_0_t) (#1#data foo))
      (#1#cond
       (else:
         (#1#apply
          (#1#lambda (nil (x_2) nil nil #f) (#1#var x_2 x))
          ((#1#var case_0_t_1 case_0_t))))))))

(T '(case 'foo
      ((foo) #t)
      (else 1 2 3))
   '(#1#let (case_0_t_1)
     (#1#begin
      (#1#set! (#1#var case_0_t_1 case_0_t) (#1#data foo))
      (#1#cond
       (clause:
         (#1#eqv (#1#var case_0_t_1 case_0_t) (#1#data foo))
         (#1#data #true))
       (else:
         (#1#begin (#1#data 1) (#1#data 2) (#1#data 3)))))))

(T '(case 'foo
      ((foo) => (lambda (x) x)))
   '(#1#let (case_0_t_1)
     (#1#begin
      (#1#set! (#1#var case_0_t_1 case_0_t) (#1#data foo))
      (#1#cond
       (clause:
         (#1#eqv (#1#var case_0_t_1 case_0_t) (#1#data foo))
         (#1#apply
          (#1#lambda (nil (x_2) nil nil #f) (#1#var x_2 x))
          ((#1#var case_0_t_1 case_0_t))))))))

; Test 'while' and some exiting syntaxes:
(T '(while #t 1 2 3)
   '(#1#while (#1#data #true)
     (#1#begin (#1#data 1) (#1#data 2) (#1#data 3))))

; Test 'for'
(T '(for (i 1 10) 1 2 i)
   '(#1#let (i_0)
     (#1#begin
      (#1#set! (#1#var i_0 i) (#1#data 1))
      (#1#for ((#1#data 10) (#1#data 1) (#1#var i_0 i))
       (#1#begin (#1#data 1) (#1#data 2) (#1#var i_0 i))))))

(T '(for (i 1 10 2) 1 2 i)
   '(#1#let (i_0)
     (#1#begin
      (#1#set! (#1#var i_0 i) (#1#data 1))
      (#1#for ((#1#data 10) (#1#data 2) (#1#var i_0 i))
       (#1#begin (#1#data 1) (#1#data 2) (#1#var i_0 i))))))

; Test 'do'
(T '(do () ((= 0 1) 1 2 3)
      4 5 6)
   '(#1#let ()
     (#1#do
      (#1#eq (#1#data 0) (#1#data 1))
      (#1#begin (#1#data 1) (#1#data 2) (#1#data 3))
      nil
      (#1#begin (#1#data 4) (#1#data 5) (#1#data 6)))))

(T '(do ((i 10)
         (y 20 (+ y -1)))
      ((> i y) (+ i y 11))
      x:
      y:
      z:)
   '(#1#let (i_0 y_1)
     (#1#begin
      (#1#set! (#1#var i_0 i) (#1#data 10))
      (#1#set! (#1#var y_1 y) (#1#data 20))
      (#1#do
       (#1#gt (#1#var i_0 i) (#1#var y_1 y))
       (#1#add
        (#1#add (#1#var i_0 i) (#1#var y_1 y))
        (#1#data 11))
       (#1#begin (#1#set! (#1#var i_0 i) (#1#var i_0 i))
        (#1#set! (#1#var y_1 y) (#1#add (#1#var y_1 y) (#1#data -1))))
       (#1#begin (#1#data x:) (#1#data y:) (#1#data z:))))))

; Test 'with-cleanup'
(T '(with-cleanup
      (+ 1 2 3)
      (begin
        1
        2
        3))
  '(#1#let (*BKL-CLEANUP-COND*_0 *BKL-CLEANUP-TAG*_1 *BKL-CLEANUP-VAL*_2)
    (#1#begin (#1#set! (#1#var *BKL-CLEANUP-COND*_0 *BKL-CLEANUP-COND*) (#1#nil))
    (#1#set! (#1#var *BKL-CLEANUP-TAG*_1 *BKL-CLEANUP-TAG*) (#1#nil))
     (#1#set! (#1#var *BKL-CLEANUP-VAL*_2 *BKL-CLEANUP-VAL*) (#1#nil))
     (#1#with-cleanup
      ((#1#var *BKL-CLEANUP-COND*_0 *BKL-CLEANUP-COND*)
       (#1#var *BKL-CLEANUP-TAG*_1 *BKL-CLEANUP-TAG*)
       (#1#var *BKL-CLEANUP-VAL*_2 *BKL-CLEANUP-VAL*)
       (#1#cond
        (clause: (#1#nil? (#1#var *BKL-CLEANUP-COND*_0 *BKL-CLEANUP-COND*)) (#1#nil))
        (clause: (#1#eq (#1#var *BKL-CLEANUP-COND*_0 *BKL-CLEANUP-COND*) (#1#data 1))
                         (#1#return-from
                          (#1#var *BKL-CLEANUP-TAG*_1 *BKL-CLEANUP-TAG*)
                          (#1#var *BKL-CLEANUP-VAL*_2 *BKL-CLEANUP-VAL*)))
        (clause: (#1#eq (#1#var *BKL-CLEANUP-COND*_0 *BKL-CLEANUP-COND*) (#1#data 2))
                 (#1#return (#1#var *BKL-CLEANUP-VAL*_2 *BKL-CLEANUP-VAL*)))
        (else: (#1#nil))))
      ((#1#add (#1#add (#1#data 1) (#1#data 2)) (#1#data 3)))
      (#1#begin (#1#data 1) (#1#data 2) (#1#data 3))))))

(T '(with-cleanup
      (+ 4 5 6)
      (+ 1 2 3)
      (begin
        1
        2
        3))
   '(#1#let (*BKL-CLEANUP-COND*_0 *BKL-CLEANUP-TAG*_1 *BKL-CLEANUP-VAL*_2)
     (#1#begin (#1#set! (#1#var *BKL-CLEANUP-COND*_0 *BKL-CLEANUP-COND*) (#1#nil))
      (#1#set! (#1#var *BKL-CLEANUP-TAG*_1 *BKL-CLEANUP-TAG*) (#1#nil))
      (#1#set! (#1#var *BKL-CLEANUP-VAL*_2 *BKL-CLEANUP-VAL*) (#1#nil))
      (#1#with-cleanup
       ((#1#var *BKL-CLEANUP-COND*_0 *BKL-CLEANUP-COND*)
        (#1#var *BKL-CLEANUP-TAG*_1 *BKL-CLEANUP-TAG*)
        (#1#var *BKL-CLEANUP-VAL*_2 *BKL-CLEANUP-VAL*)
        (#1#cond
         (clause: (#1#nil? (#1#var *BKL-CLEANUP-COND*_0 *BKL-CLEANUP-COND*)) (#1#nil))
         (clause: (#1#eq (#1#var *BKL-CLEANUP-COND*_0 *BKL-CLEANUP-COND*) (#1#data 1))
                          (#1#return-from
                           (#1#var *BKL-CLEANUP-TAG*_1 *BKL-CLEANUP-TAG*)
                           (#1#var *BKL-CLEANUP-VAL*_2 *BKL-CLEANUP-VAL*)))
         (clause: (#1#eq (#1#var *BKL-CLEANUP-COND*_0 *BKL-CLEANUP-COND*) (#1#data 2))
                  (#1#return (#1#var *BKL-CLEANUP-VAL*_2 *BKL-CLEANUP-VAL*)))
         (else: (#1#nil))))
       ((#1#add (#1#add (#1#data 1) (#1#data 2)) (#1#data 3))
        (#1#add (#1#add (#1#data 4) (#1#data 5)) (#1#data 6)))
       (#1#begin (#1#data 1) (#1#data 2) (#1#data 3))))))

; Test 'handle-exceptions'
(T '(handle-exceptions
      x
      (displayln x)
      (begin 1 2 (raise 3)))
   '(#1#let (x_0)
     (#1#begin (#1#set! (#1#var x_0 x) (#1#nil))
      (#1#handle-exceptions
       (#1#var x_0 x)
       (#1#apply (#1#prim displayln) ((#1#var x_0 x)))
       (#1#begin (#1#data 1) (#1#data 2) (#1#return-from (#1#data nil) (#1#data 3)))))))

;(displayln (bkl-gc-statistics))
(displayln "ALL OK")
::
