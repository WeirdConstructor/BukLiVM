(import (module ev-loop))
(let ((e (ev-loop-new))
      (l [1 2 3]))
  (define (wait ms)
    (define cc (current-coroutine))
    (ev-loop-timeout e ms
      (lambda (err?) (cc 1)))
    (yield nil))
  (define (other)
    (displayln Y1:)
    (wait 400)
    (displayln Y2:)
    (wait 400)
    (displayln Y3:)
    (wait 400)
    (displayln Y4:)
    (wait 400)
    (displayln Y5:)
    (wait 400)
    (displayln Y6:)
    (wait 400)
    (displayln Y7:)
    (wait 400)
    (displayln Y8:)
    (wait 400)
    (displayln Y9:)
    (wait 400))
  (define :coroutine (timed x)
    (displayln X1: x)
    (wait 500)
    (displayln X2: x)
    (wait 500)
    (when x (other))
    (displayln X3: x)
    (wait 500)
    (displayln X4: x)
    (wait 500)
    (displayln X5: x))
  (timed #t)
  (ev-loop-run e))
