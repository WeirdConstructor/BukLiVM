(define root-env [{} []])

(define t
  (lambda (code expected env)
    (when (nil? env) (set! env [{} []]))
    (let ((r (invoke-compiler code code #f env)))
      (if (eqv? r expected)
        (displayln (str "OK - " code))
        (error (str "Test failed: " code ", returned: " r " != " expected))))))

(define T
  (lambda (code expected env)
    (when (nil? env) (set! env [{} []]))
    (let ((r (invoke-compiler [code] code #f env)))
      (if (eqv? (write-str r) (write-str expected))
        (displayln (str "OK - " code))
        (error (str "Test failed: " code ", returned: " r " != " expected))))))

;----------------------------------------------------------------------------
;(error X:)
;----------------------------------------------------------------------------

; test externally given environment executed inside VM:
(let ((my-env []))
  (T '(begin 1) 1 my-env)
  ($!l (@0 my-env) [var: (length (@1 my-env))])
  (push! (@1 my-env) 12)
  (displayln my-env)
  (T '(begin
        (define k 10)
        ((lambda () l)))
     12 my-env))

; test recursive calling into VM:
(let ((my-env [])
      (func (invoke-compiler ['(displayln foo-out: (+ 10 20))] "test-code x" #t root-env)))
  (T '(begin 1) 1 my-env)
  ($!xxx (@0 my-env) [var: (length (@1 my-env))])
  (push! (@1 my-env) func)
  (T '(begin
		(define k 10)
		((lambda () (run-vm-prog xxx [])))
		(+ 12.345 k))
	 22.345
	 my-env))

;----------------------------------------------------------------------------

(T '((lambda (x)
       ((lambda (y) (+ x y))
        10))
     5)
   15)
(T '(begin (define x 0)
           (define (o a)
             (set! x (+ x a)))
           (for (i 1 1000000)
             (o 1)))
   1000000)
;(error X:)

;----------------------------------------------------------------------------

(T '(when   #t 10) 10)
(T '(when   #f 10) nil)
(T '(unless #t 10) nil)
(T '(unless #f 10) 10)
;----------------------------------------------------------------------------

(t "123"        123)
(t "(+ 123)"    123)
(t "(+ 1 123)"  124)
(t '((+ 1 123)
     (+ 1 345)
     (+ 1 567))
   568)
(t "(define x 12) (define y 34) (+ x y)" 46)

(T '123         123)
(T '(+ 123)     123)
(T '(+ 1 123)   124)
(t '((define x 12)
     (define y 34)
     (+ x y))
   46)
(T '(begin
      (define x 12)
      (define y 34)
      (+ x y))
   46)
(t '((define x 12)
     (set! x (+ 14.5 x)))
   26.5)
(t '((define x +)
     (set! x (x 1.5 1)))
   2.5)

(T '(* 2 3 4)          24)

(T '(> (atom-id []) 0) #true)

; Test basic variable handling:
(T '(begin (define y 30) y) 30)
(T '(begin (define x 12)
           (define y 30)
           (set! y 10)
           y) 10)

; Test data loading:
(T 'a: a:)
(T '[1 2 3] '(1 2 3))
(T '{x: 12} {x: 12})
(T ''{x: 12} {x: 12})
(T '{x: (+ 6 2)} {x: 8})
(T ''(1 2 3) '(1 2 3))
(T ''(eq? 1 2) '(eq? 1 2))

; Test arithmetics:
(T '(+ 1 2 3) 6)
(T '(+ 1.2 2 3) 6.2)
(T '(* 1.2 2 3) 7.2)
(T '(/ 8 2 2) 2)
(T '(/ 5 2) 2)
(T '(- 10.5 1.3 2.2) 7)
(T '(< 1 2) #true)
(T '(> 1 2) #false)
(T '(<= 1 2) #true)
(T '(<= 1 2) #true)
(T '(<= 2 2) #true)
(T '(<= 2.1 2) #false)
(T '(>= 2.1 2) #true)

; Test procedures:
(T '(eqv? #t #t) #true)
(T '(eqv? #f #f) #true)
(T '(eqv? #t #f) #false)

(T '(eqv? a: a:) #true)
(T '(eqv? a: b:) #false)

(T '(eqv? 'a 'a) #true)
(T '(eqv? 'a 'b) #false)

(T '(eqv? 2 (/ 4 2)) #true)
(T '(eqv? 2 (/ 4.0 2.0)) #false)
(T '(eqv? 2.0 (/ 4.0 2.0)) #true)

(T '(eqv? [] []) #false)
(T '(eqv? {} {}) #false)
(T '(eqv? { x: 11 } { x: 10 }) #false)
(T '(eqv? 2 (/ 5 2)) #true)
(T '(eqv? 2 (/ 5.0 2)) #false)
(T '(eqv? #f 0) #false)
(T '(eqv? #f []) #false)
(T '(eqv? 2.0 2) #false)

(T '(eqv? + (let ((y +)) y)) #true)
(T '(eqv? + (let ((o +)) (let ((y +)) y o))) #true)
(T '(let ((m { x: 11 }) (l #f)) (set! l m) (eqv? m l)) #true)

(T '(not #t) #false)
(T '(not 1) #false)
(T '(not '()) #false)
(T '(not #f) #true)

(T '(symbol? 'a) #true)
(T '(symbol? a:) #false)
(T '(symbol? 1) #false)

(T '(keyword? a:) #true)
(T '(keyword? 'a) #false)
(T '(keyword? 1) #false)

(T '(nil? 1) #false)
(T '(nil? 0) #false)
(T '(nil? []) #false)
(T '(nil? nil) #true)

(T '(exact? nil) #false)
(T '(exact? 123) #true)
(T '(exact? 1.0) #false)

(T '(inexact? nil) #false)
(T '(inexact? 123) #false)
(T '(inexact? 1.0) #true)

(T '(string? 1) #false)
(T '(string? a:) #false)
(T '(string? 'a) #false)
(T '(string? "foo") #true)
(T '(boolean? "foo") #false)
(T '(boolean? #t) #true)
(T '(boolean? #f) #true)
(T '(boolean? nil) #false)

(T '(list? nil) #false)
(T '(list? []) #true)
(T '(list? '()) #true)
(T '(list? string?) #false)
(T '(list? {}) #false)

(T '(map? {}) #true)
(T '(map? '()) #false)
(T '(map? []) #false)
(T '(map? nil) #false)

(T '(procedure? string?) #true)
(T '(procedure? (lambda (x) x)) #true)
;(T '(procedure? if) #false)
(T '(procedure? '()) #false)

; Test (type ...):
(T '(let ((m { 'nil 1234 }))
      (@(type nil) m))
   nil)

(T '(let ((m { (type nil) 1234 }))
      (@(type nil) m))
   1234)

(T '(type []) 'list)
(T '(type [1 2 3]) 'list)
(T '(type '()) 'list)
(T '(type '(1 2 3)) 'list)
(T '(type {}) 'map)
(T '(type map?) 'procedure)
(T '(type (lambda () nil)) 'procedure)
(T '(type 1) 'exact)
(T '(type 1.0) 'inexact)
(T '(type nil) 'nil)
(T '(type #t) 'boolean)
(T '(type #f) 'boolean)
(T '(type 'f) 'symbol)
(T '(type f:) 'keyword)
(T '(type "f") 'string)

(T '(length [1 2 3]) 3)
(T '(length []) 0)
(T '(length '()) 0)
(T '(length {}) 0)
(T '(length {x: 12}) 1)
(T '(length {y: 324 x: 12}) 2)
(T '(length (let ((l [])) (@!9 l l))) 10)

(T '(first '(a b c)) 'a)
(T '(first '()) 'nil)
(T '(first [3]) '3)
(T '(last [1 2 3]) '3)
(T '(last [3]) '3)
(T '(last []) 'nil)
(T '(take [x: y: 12 3 4] 2) '(x: y:))
(T '(take [1] 2) '(1))
(T '(take [1 2] 2) '(1 2))
(T '(take [] 2) '())
(T '(drop [1 2 3] 2) '(3))
(T '(drop [1 2 3] 4) '())
(T '(drop [1 2 3] 3) '())
(T '(drop [] 3) '())
(T '(drop [1 2 3] 0) '(1 2 3))
(T '(drop [1 2 3] 1) '(2 3))
(T '(append [1 2 3] 1 a: { x: 12 } [5 5 5]) '(1 2 3 1 a: x: 12 5 5 5))
(T '(append [1 2 3]) '(1 2 3))

(T '(sys-slurp-file "foo.txt") "xxx\n")

; Test let TODO: Moar!
(T '(let ((x 10)) x) 10)

;(T '(begin (define x 0)
;;           (define (o a)
;;             (set! x (+ x a)))
;           (for (i 1 10000000)
;             (set! x (+ x 1))))
;   10000000)
;
;;(T '(begin (define x 10)
;;           (define (o a)
;;             (set! x (+ x a)))
;;           (for (i 1 10000000)
;;             (o 1)))
;;   nil)
;;(error x:)
;
;(T '(begin (define x 11) (set! x 32) (return x)) 32)
;(T '(begin (define x 11)
;           (set! x (return x))
;           (return x)) 11)
;(T '(begin (define g 10)
;           ((lambda ()
;              (set! g 33)
;              (return nil)
;              (set! g 45)))
;           g)
;   33)
;(T '(begin (define g 10)
;           ((lambda ()
;              (set! g 33)
;              (return g)
;              (set! g 45))))
;   33)
;(T '(return 32) 32)
;(T '{a: 10 x: (return 20)} 20)
;

(T '((lambda (x)   (+ x 1)) 1.5) 2.5)
(T '((lambda (x y) (+ (* x y) 1)) 1.5 4) 7.0)
(T '((lambda (x y) (+ (* x y) 1)) 1.5 4 e: r: g:) 7.0)
(T '((lambda (x)
       ((lambda (y) (+ x y))
        10))
     5)
   15)

(T '((lambda (x)
       ((lambda (y) (+ 1 0 3 30 30 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10))
     5) 16)

; Test define
(T '(begin (define x 10) x)     10)
(T '(begin (define (x) 10) (x)) 10)
(T '(begin
      (define (x b c)
        (+ (* b c) 10))
      (x 2.5 10))
   35)
(T '(begin (define x 10) (define x 20) x) 20)
(T '(begin (define x 10) (define y 20) (define x 21) [x y]) '(21 20))
(T '(begin (define x 10) (define y 20) (define x y) x) 20)
(T '(begin (define if 10) if) 10)


; Test varargs
(T '((lambda (. x) x))              [])
(T '((lambda (. x) x) 1 2 3)        [1 2 3])
(T '((lambda (a . x) [a x]) 1 2 3)  [1 [2 3]])
(T '((lambda (a . x) [a x]) 1)      [1 []])
(T '((lambda (a . x) [a x]))        [nil []])
(T '(begin
      (define (x a . v) [a v])
      (x 1 2 3))
   [1 [2 3]])

(T '(begin
      (define (x a . v)
        (define z v)
        [a z])
      (x 1 2 3))
   [1 [2 3]])

(t "(define x 13.3)" 13.3 root-env)
(t "x"               13.3 root-env)
(t "(define y x)"    13.3 root-env)
(t "(+ x y)"         26.6 root-env)

; test externally given environment executed inside VM:
(let ((my-env []))
  (T '(begin 1) 1 my-env)
  ($!l (@0 my-env) [var: (length (@1 my-env))])
  (push! (@1 my-env) 12)
  (T '(begin
        (define k 10)
        ((lambda () l)))
     12 my-env))

; test recursive calling into VM:
(let ((my-env [])
      (func (invoke-compiler ['(displayln foo-out: (+ 10 20))] "test-code x" #t root-env)))
  (T '(begin 1) 1 my-env)
  ($!xxx (@0 my-env) [var: (length (@1 my-env))])
  (push! (@1 my-env) func)
  (T '(begin
		(define k 10)
		((lambda () (run-vm-prog xxx [])))
		(+ 12.345 k))
	 22.345
	 my-env))

; Test comments:
(t "(define x 10)                             #;(set! x 20) x"      10)
(t "(define x #;20 10)                        #;(set! x 20) x"      10)
(t "#;()(define x #;20 10 #;[])#;{}           #;(set! x 20) x #;()" 10)
(t "#;()(#;() define #;() x #;20 10 #;[])#;{} #;(set! x 20) x"      10)

; Test conditionals:
(T '(when   #t 10) 10)
(T '(when   #f 10) nil)
(T '(unless #t 10) nil)
(T '(unless #f 10) 10)
(T '(begin
      (define x 10)
      (when (> 0 -1)
        (let ((y 22))
          (set! x (* 1.23 x y))))
      x)
   270.6)
(T '(begin
      (define x 10)
      (when (> 0 1)
        (let ((y 22))
          (set! x (* 1.23 x y))))
      x)
   10)

(T '(if #t 10 20) 10)
(T '(if #t 10)    10)
(T '(if #f 10 20) 20)
(T '(if #f 10)    nil)

(T '(begin
      (define x 10)
      (if (> 0 -1)
        (let ((y 22))
          (set! x (* 1.27 x y)))
        (let ((y 22))
          (set! x (* 1.23 x y))))
      x)
   279.4)

(T '(begin
      (define x 10)
      (if (> 0 1)
        (let ((y 22))
          (set! x (* 1.27 x y)))
        (let ((y 22))
          (set! x (* 1.23 x y))))
      x)
   270.6)

(T '(let ((aid  (atom-id (type nil)))
          (aid2 (atom-id (type nil)))
          (aid3 (atom-id (type nil))))
      [(eqv? aid aid2) (eqv? aid aid3)])
   '(#t #t))


(T '(begin (define x 0)
           (define (o a)
             (set! x (+ x a)))
           (for (i 1 1000000)
             (o 1)))
   1000000)

(T '(begin (define x 0)
;           (define (o a)
;             (set! x (+ x a)))
           (for (i 1 10000000)
             (set! x (+ x 1))))
   10000000)

(T '(begin (define x 0)
           (for (i 0 -100 -1)
             (set! x (+ x i)))
           x)
   -5050)

(T '(begin
      (define x 1)
      (for (i 1 0) (set! x 20) i)
      x)
   1)

(T '(begin
      (define x 1)
      (for (i 1 1) (set! x (+ i 20)) i)
      x)
   21)

(T '(begin
      (define x 1)
      (for (i 1 2) (set! x (+ i 20)) i)
      x)
   22)

; Test binary ops that are (sometimes) optimized by the compiler
; to be statically compiled down to VM OPs:
(T '(+ 1 2 3) 6)
(T '(let ((x +)) (x 1 2 3)) 6)

(T '(+ 2 3) 5)
(T '(let ((x +)) (x 2 3)) 5)

(T '(- 10 2 3) 5)
(T '(let ((x -)) (x 10 2 3)) 5)

(T '(- 10 2) 8)
(T '(let ((x -)) (x 10 2)) 8)

(T '(- 10) -10)
(T '(let ((x -)) (x 10)) -10)

(T '(= 10 10) #t)
(T '(= 10 9) #f)
(T '(let ((x =)) (x 10 10)) #t)
(T '(let ((x =)) (x 10 9)) #f)

(T '(= 10 10 10) #t)
(T '(= 10 10 9) #f)
(T '(let ((x =)) (x 10 10 10)) #t)
(T '(let ((x =)) (x 10 10 9)) #f)


(T '(< 10 11) #t)
(T '(< 10 10) #f)
(T '(< 10 11 12) #t)
(T '(< 10 11 11) #f)
(T '(let ((x <)) (x 10 11 12)) #t)
(T '(let ((x <)) (x 10 11 11)) #f)

(T '(> 11 10) #t)
(T '(> 11 11) #f)
(T '(> 12 11 10) #t)
(T '(> 12 11 11) #f)
(T '(let ((x >)) (x 12 11 10)) #t)
(T '(let ((x >)) (x 12 11 11)) #f)

(T '(>= 11 10) #t)
(T '(>= 11 12) #f)
(T '(>= 12 11 10) #t)
(T '(>= 12 11 12) #f)
(T '(let ((x >=)) (x 12 11 10)) #t)
(T '(let ((x >=)) (x 12 11 12)) #f)

(T '(<= 10 11) #t)
(T '(<= 11 11) #t)
(T '(<= 10 9) #f)
(T '(<= 11 11 12) #t)
(T '(<= 11 11 9) #f)
(T '(let ((x <=)) (x 11 11 12)) #t)
(T '(let ((x <=)) (x 11 11 9)) #f)

(T ''@ '@)
(T ''@! '@!)

(T '(@0 [22.2 22.4 45]) 22.2)
(T '(let ((at @)) (at 0 [22.2 22.4 45])) 22.2)
(T '(let ((x [])) (@!2 x 10) x) [nil nil 10])
(T '(let ((x [])
          (at-set! @!))
      (at-set! 2 x 10) x)
   [nil nil 10])

(T '(@x: {x: 22.2}) 22.2)
(T '(let ((at @)) (at x: {x: 22.2})) 22.2)
(T '(let ((x {})) (@!x: x 10) x) {x: 10})
(T '(let ((x {})
          (at-set! @!))
      (at-set! x: x 10) x)
   {x: 10})

(T '(let ((x 2) (v [1 2 3])) (@x v)) 3)

(T '($x  {'x 10}) 10)
(T '(let ((m {'x 10})) ($!x m 12) m) {'x 12})

(T '(eval 1)                    1)
(T '(eval '(+ 1 2))             3)
(T '(eval '(eval '(+ 1 2)))     3)
(T '(eval '(eval '(+ 1 2)))     3)
(T '(let ((env (bkl-environment)))
      (eval '(define x 12) env)
      (eval 'x env))
   12)
(T '(let ((env (bkl-environment)))
      (eval '(define x 12) env)
      (eval '(set! x (* x 2)) env)
      (eval 'x env))
   24)

(T '(begin
      (include "bukalisplib\\test-compiler.bkl")
      test-include-ok)
   1)

(displayln (bkl-gc-statistics))
(displayln "ALL OK")
::
