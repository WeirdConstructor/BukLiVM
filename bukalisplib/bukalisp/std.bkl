(define-library
  (bukalisp std)
  (export map eval map-join)
  (import (bukalisp base))
  (begin
    (define (eval- code . env)
      (if (empty? env)
        (eval code)
        (eval code env)))

    (define eval eval-)

    (define (map proc . lists)
      (let ((first-list (@0 lists)))
        (unless first-list
          (error "'map' needs at least one list as argument"))
        (unless (list? first-list)
          (error "'map' expected list as argument" first-list))
        (let ((out-list []))
;          (displayln LEN: (length lists) lists)
          (if (> (length lists) 1)
            (let ((j 0))
              (set! lists (drop lists 1))
              (do-each (i first-list)
                (let ((args [i]))
                  (do-each (l lists)
                    (push! args (@j l)))
                  (set! j (+ j 1))
                  (push! out-list (apply proc args)))))
            (do-each (i first-list)
              (push! out-list (proc i))))
          out-list)))

    (define (map-join sep fn lst)
      (define out [])
      (define i 0)
      (do-each (v lst)
        (push! out (fn v))
        (set! i (+ i 1))
        (unless (= i (length lst))
          (push! out sep)))
      out) ))
