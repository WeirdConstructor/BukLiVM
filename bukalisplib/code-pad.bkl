(define make-code-pad-object
  (lambda (prog-frame)
    (let ((self { code:       []
                  debug-info: {} }))
      (define push-op
        (lambda (op-code o a b)
          (let ((op-desc [op-code
                           (if (list? o) (@0 o) o)
                           (if (list? o) (@1 o) 0)
                           (if (list? a) (@0 a) a)
                           (if (list? a) (@1 a) 0)
                           (if (list? b) (@0 b) b)
                           (if (list? b) (@1 b) 0)]))
            (@!op-desc
              ($debug-info: self)
              (.get-debug-info prog-frame))
            (push! ($code: self) op-desc))))

      ($define! self (append-code-pad code-pad)
        (let ((code ($code: self)))
          (do-each (k v ($debug-info: code-pad))
            (@! k ($debug-info: self) v))
          (do-each (op ($code: code-pad))
            (push! code op))))

      ($define! self (count-ops)
        (length ($code: self)))

      ($define! self (to-vm-prog-code)
        ($code: self))

      ($define! self (to-vm-prog-debug-info)
        (let ((m {}) (i 0))
          (do-each (op-desc ($code: self))
            #;(displayln TO-VM-PROG-DEBUG-INFO:
                       op-desc (@op-desc ($debug-info: self)))
            (@!i m (@op-desc ($debug-info: self)))
            (set! i (+ i 1)))
          m))

      ($define! self (op-nop)
        (push-op NOP: 0 0 0))

      ($define! self (op-push-env size)
        (push-op PUSH_ENV: 0 size 0))

      ($define! self (op-pop-env)
        (push-op POP_ENV: 0 0 0))

      ($define! self (op-dump-env-stack)
        (push-op DUMP_ENV_STACK: 0 0 0))

      ($define! self (op-set-return idx)
        (push-op SET_RETURN: 0 idx 0))

      ($define! self (op-return idx)
        (push-op RETURN: idx 0 0))

      ($define! self (op-mov out-idx in-idx o)
        (push-op MOV: out-idx in-idx (if (nil? o) 0 o)))

      ($define! self (op-mov-from out-idx env-idx in-idx)
        (push-op MOV_FROM: out-idx env-idx in-idx))

      ($define! self (op-mov-to out-idx env-idx in-idx)
        (push-op MOV_TO: out-idx env-idx in-idx))

      ($define! self (op-load-prim out-idx prim-nr)
        (push-op LOAD_PRIM: out-idx prim-nr 0))

      ($define! self (op-load-nil out-idx)
        (push-op LOAD_NIL: out-idx 0 0))

      ($define! self (op-new-vec out-idx len)
        (push-op NEW_VEC: out-idx len 0))

      ($define! self (op-new-map out-idx)
        (push-op NEW_MAP: out-idx 0 0))

      ($define! self (op-set-vec vec-idx idx src-idx)
        (push-op SET_VEC: vec-idx idx src-idx))

      ($define! self (op-cset-vec vec-idx idx src-idx)
        (push-op CSET_VEC: vec-idx idx src-idx))

      ($define! self (op-call out-idx func-idx argvec-idx)
        (push-op CALL: out-idx func-idx argvec-idx))

      ($define! self (op-new-closure out-idx in-idx)
        (push-op NEW_CLOSURE: out-idx in-idx 0))

      ($define! self (op-pack-va out-idx env-pos-idx)
        (push-op PACK_VA: out-idx env-pos-idx 0))

      ($define! self (op-br jmp-offs)
        (push-op BR: jmp-offs 0 0))

      ($define! self (op-brif jmp-offs val-idx)
        (push-op BRIF: jmp-offs val-idx 0))

      ($define! self (op-brnif jmp-offs val-idx)
        (push-op BRNIF: jmp-offs val-idx 0))

      ($define! self (op-ge out-idx a-idx b-idx)
        (push-op GE: out-idx a-idx b-idx))

      ($define! self (op-eq out-idx a-idx b-idx)
        (push-op EQ: out-idx a-idx b-idx))

      ($define! self (op-add out-idx a-idx b-idx)
        (push-op ADD: out-idx a-idx b-idx))

      ($define! self (op-sub out-idx a-idx b-idx)
        (push-op SUB: out-idx a-idx b-idx))

      ($define! self (op-mul out-idx a-idx b-idx)
        (push-op MUL: out-idx a-idx b-idx))

      ($define! self (op-div out-idx a-idx b-idx)
        (push-op DIV: out-idx a-idx b-idx))

      ($define! self (op-mod out-idx a-idx b-idx)
        (push-op MOD: out-idx a-idx b-idx))

      ($define! self (op-gt out-idx a-idx b-idx)
        (push-op GT: out-idx a-idx b-idx))

      ($define! self (op-lt out-idx a-idx b-idx)
        (push-op LT: out-idx a-idx b-idx))

      ($define! self (op-le out-idx a-idx b-idx)
        (push-op LE: out-idx a-idx b-idx))

      ($define! self (op-forinc cond-idx step-idx end-idx)
        ; XXX: iter-idx=cond-idx+1
        (push-op FORINC: cond-idx step-idx end-idx))

      ($define! self (op-set obj-idx key-idx val-idx)
        (push-op SET: obj-idx key-idx val-idx))

      ($define! self (op-get out-idx obj-idx key-idx)
        (push-op GET: out-idx obj-idx key-idx))

      ($define! self (op-iter iter-idx vec-idx)
        (push-op ITER: iter-idx vec-idx))

      ($define! self (op-next ok-idx val-idx iter-idx)
        (push-op NEXT: ok-idx val-idx iter-idx))

      ($define! self (op-ikey key-idx iter-idx)
        (push-op IKEY: key-idx iter-idx))

;      #;($define! self (op-load static out-idx)
;        ; TODO: optimize static data loading by storing their
;        ;       positions in a map
;        (let ((idx (.add-static-data prog-frame static)))
;          (push-op MOV: out-idx [idx -1] 0)))
    )))
