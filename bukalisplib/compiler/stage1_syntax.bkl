;----------------------------------------------------------------------------

(add-syntax
  'quote
  (lambda (ctx args T gtx) (.S1-T-Q gtx ctx (@1 args))))
;----------------------------------------------------------------------------

(add-syntax
  'unquote
  (lambda (ctx args T gtx) (T ctx (@1 args))))
;----------------------------------------------------------------------------

(add-syntax
  'begin
  (lambda (ctx args T gtx) (s1-begin T ctx (drop args 1))))
;----------------------------------------------------------------------------

(add-syntax
  'if
  (lambda (ctx args T gtx)
    (when (< (length args) 3)
      (error "'if' needs at least 2 arguments" args))
    (when (> (length args) 4)
      (error "'if' can not have more than 3 arguments" args))
    (if (= (length args) 3)
      ['#1#if (T ctx (@1 args)) (T ctx (@2 args)) (T ctx nil)]
      ['#1#if (T ctx (@1 args)) (T ctx (@2 args)) (T ctx (@3 args))])))
;----------------------------------------------------------------------------

(add-syntax
  'unless
  (lambda (ctx args T gtx)
    (when (< (length args) 3)
      (error "'unless' needs at least 2 arguments" args))
    ['#1#if
     (.AM gtx ['#1#not (T ctx (@1 args))])
     (.AM gtx (s1-begin T ctx (drop args 2)))
     (.AM gtx '(#1#nil))]))
;----------------------------------------------------------------------------

(add-syntax
  'when
  (lambda (ctx args T gtx)
    (when (< (length args) 3)
      (error "'when' needs at least 2 arguments" args))
    ['#1#if
     (T ctx (@1 args))
     (.AM gtx (s1-begin T ctx (drop args 2)))
     (.AM gtx '(#1#nil))]))
;----------------------------------------------------------------------------

(add-syntax
  'set!
  (lambda (ctx args T gtx)
    (unless (symbol? (@1 args))
      (error "'set!' expected symbol as first argument" args))
    (unless (= (length args) 3)
      (error "'set!' needs exactly 2 arguments" args))
    (let ((var-t (T ctx (@1 args))))
      (append '#1#set! [var-t (T ctx (@2 args))]))))
;----------------------------------------------------------------------------

(add-syntax
  'return
  (lambda (ctx args T gtx)
    (unless (= (length args) 2)
      (error "'return' needs exactly 1 arguments" args))
    (append '#1#return [(T ctx (@1 args))])))
;----------------------------------------------------------------------------

(add-syntax
  'yield
  (lambda (ctx args T gtx)
    (unless (= (length args) 2)
      (error "'yield' needs exactly 1 arguments" args))
    (append '#1#yield [(T ctx (@1 args))])))
;----------------------------------------------------------------------------

(add-syntax
  'raise
  (lambda (ctx args T gtx)
    (unless (= (length args) 2)
      (error "'raise' needs exactly 1 arguments" args))
    (append '#1#return-from [['#1#data nil] (T ctx (@1 args))])))
;----------------------------------------------------------------------------

(add-syntax
  'handle-exceptions
  (lambda (ctx args T gtx)
    (unless (> (length args) 3)
      (error "'handle-exceptions' needs at least 3 arguments" args))
    (unless (symbol? (@1 args))
      (error "'handle-exceptions' first argument needs to be a symbol"))
    (define var-ref [])
    (compile-let-block
      ctx T gtx
      (.AM gtx [[(@1 args) nil]])
      (lambda (ctx T gtx)
        (.AM gtx
             ['#1#handle-exceptions
              (T ctx (@1 args))
              (T ctx (@2 args))
              (s1-begin T ctx (drop args 3))])))))
;----------------------------------------------------------------------------

(add-syntax
  'with-cleanup
  (lambda (ctx args T gtx)
    (unless (or (= (length args) 3)
                (= (length args) 4))
      (error "'with-cleanup' needs 2 or 3 arguments" args))
    (let ((clnup-cond-var-sym '*BKL-CLEANUP-COND*)
          (clnup-tag-var-sym  '*BKL-CLEANUP-TAG*)
          (clnup-val-var-sym  '*BKL-CLEANUP-VAL*))
      (compile-let-block
        ctx T gtx
        (.AM gtx [[clnup-cond-var-sym nil]
                  [clnup-tag-var-sym  nil]
                  [clnup-val-var-sym  nil]])
        (lambda (ctx T gtx)
          (define continuation-check
            (T ctx ['cond
                    [['nil? clnup-cond-var-sym] nil]
                    [['= clnup-cond-var-sym 1] ['return-from*
                                                clnup-tag-var-sym
                                                clnup-val-var-sym]]
                    [['= clnup-cond-var-sym 2] ['return
                                                clnup-val-var-sym]]]))
          (if (= (length args) 3)
            ['#1#with-cleanup
             [(T ctx clnup-cond-var-sym)
              (T ctx clnup-tag-var-sym)
              (T ctx clnup-val-var-sym)
              continuation-check]
             [(T ctx (@1 args))]
             (T ctx (@2 args))]
            ['#1#with-cleanup
             [(T ctx clnup-cond-var-sym)
              (T ctx clnup-tag-var-sym)
              (T ctx clnup-val-var-sym)
              continuation-check]
             [(T ctx (@2 args)) (T ctx (@1 args))]
             (T ctx (@3 args))]))))))
;----------------------------------------------------------------------------

(add-syntax
  'block
  (lambda (ctx args T gtx)
    (unless (> (length args) 2)
      (error "'block' needs at least 2 arguments (the tag and an expression)" args))
    (unless (or (symbol? (@1 args))
                (keyword? (@1 args)))
      (error "'block' tag needs to be either a symbol or a keyword" args))
    ['#1#block (@1 args)
     (s1-begin T ctx (drop args 2))]))
;----------------------------------------------------------------------------

(add-syntax
  'return-from*
  (lambda (ctx args T gtx)
    (unless (= (length args) 3)
      (error "'return-from' needs exactly 2 arguments the tag and the value" args))
    (append '#1#return-from [(T ctx (@1 args)) (T ctx (@2 args))])))
;----------------------------------------------------------------------------

(add-syntax
  'return-from
  (lambda (ctx args T gtx)
    (unless (= (length args) 3)
      (error "'return-from' needs exactly 2 arguments the tag and the value" args))
    (unless (or (symbol? (@1 args))
                (keyword? (@1 args)))
      (error "'return-from' tag needs to be either a symbol or a keyword" args))
    (append '#1#return-from [(.S1-T-Q gtx ctx (@1 args)) (T ctx (@2 args))])))
;----------------------------------------------------------------------------

(define only-in-first
 (lambda (a b)
   (define out [])
   (do-each (v a)
     (define found? #f)
     (do-each (w b)
       (if (eqv? v w) (set! found? #t)))
     (unless found?
       (push! out v)))
   out))
;----------------------------------------------------------------------------

(add-syntax
  'lambda
  (lambda (ctx args T gtx)
    (define lambda-name nil)
    (when (not (nil? (lambda-name: ctx)))
      (set! lambda-name (lambda-name: ctx))
      (set! ctx (assign ctx [lambda-name: nil])))
    (define is-coroutine?
      (if (eqv? (@1 args) coroutine:)
        (begin
          (set! args (drop args 2))
          #t)
        (begin
          (set! args (drop args 1))
          #f)))
    (unless (> (length args) 1)
      (error "'lambda' needs more than 1 argument" args))
    (define lambda-params
      (parse-lambda-params
        (@0 args)
        (lambda (msg a)
          (error (str "'lambda' parameter error: " msg) a))))
    (let ((new-env {" PARENT "         (env: ctx)
                    " LAMBDA-UPV "     {}})
          (new-args [])
          (va-arg nil)
          (let-vars [])
          (new-ctx (assign ctx [env:      new-env
                                let-vars: let-vars])))
      (do-each (s (args: lambda-params))
        (let ((new-var-name (gtx-gensym gtx s)))
          (push! new-args new-var-name)
          (@!s new-env [var: new-var-name s])))
      (unless (nil? (varargs-param: lambda-params))
        (let ((va-arg-name  (varargs-param: lambda-params))
              (new-var-name (gtx-gensym gtx va-arg-name)))
          (@!va-arg-name new-env [var: new-var-name va-arg-name])
          (set! va-arg new-var-name)))
      (let ((compiled-body
              (.AM gtx (s1-begin T new-ctx (drop args 1))))
            (lambda-upv
              (if (> (length (@" LAMBDA-UPV " new-env)) 0)
                (keys-in-map (@" LAMBDA-UPV " new-env))
                nil))
            (defined-upvalues (if (found-upv-in-env? new-env)
                                (only-in-first (upvalues-in-env new-env) new-args)
                                []))
            (non-upv-let-vars (only-in-first let-vars defined-upvalues))
            (lambda-body (if (found-upv-in-env? new-env)
                           (let ((upv-body ['#1#create-upv
                                            lambda:
                                            (upvalues-in-env new-env)
                                            compiled-body]))
                             (if (> (length defined-upvalues) 0)
                               [['#1#let defined-upvalues upv-body]]
                               [upv-body]))
                           [compiled-body])))
        (unless (empty? non-upv-let-vars)
          (set! lambda-body [['#1#let non-upv-let-vars (first lambda-body)]]))
        (append
          '#1#lambda
          (.AM gtx (if (nil? va-arg)
                     [[lambda-name new-args nil    lambda-upv is-coroutine?]]
                     [[lambda-name new-args va-arg lambda-upv is-coroutine?]]))
          lambda-body)))))
;----------------------------------------------------------------------------

(define compile-let-block
  (lambda (ctx T gtx var-binds body-compile-func)
    (let ((new-env           { " PARENT " (env: ctx) })
          (let-new-var-names [])
          (new-ctx           (assign ctx [env:      new-env
                                          let-vars: let-new-var-names]))
          (body              (.AM gtx ['#1#begin]))
          (out-form          ['#1#let let-new-var-names body]))
      (do-each (bind-pair var-binds)
        (let ((bind-name    (@0 bind-pair))
              (new-var-name (gtx-gensym gtx bind-name))
              (var-t        [var: new-var-name bind-name]))
          (@!bind-name new-env var-t)
          (push! let-new-var-names new-var-name)
          (push! body (.AM gtx ['#1#set!
                                (append '#1#var (drop var-t 1))
                                (T (assign
                                     new-ctx
                                     [lambda-name: bind-name])
                                   (@1 bind-pair))]))))
      (let ((compiled-body
             (body-compile-func new-ctx T gtx)))
        (push! body compiled-body)
        (when (= (length body) 2)
          (set! body (@1 body)))
        (if (found-upv-in-env? new-env)
          ['#1#let
           (append
             let-new-var-names
             (only-in-first
               (upvalues-in-env new-env)
               let-new-var-names))
           ['#1#create-upv let: (upvalues-in-env new-env) body]]
          ['#1#let let-new-var-names body])))))
;----------------------------------------------------------------------------

(add-syntax
  'let
  (lambda (ctx args T gtx)
    (unless (> (length args) 2)
      (error "'let' needs more than 1 argument" args))
    (let ((var-binds (@1 args)))
      (unless (list? var-binds)
        (error "'let' binding list needs to be a list" var-binds))
      (do-each (bind-pair var-binds)
        (unless (list? bind-pair)
          (error "'let' binding pair needs to be a list" bind-pair))
        (unless (= (length bind-pair) 2)
          (error "'let' binding pair needs exactly 2 elements" bind-pair))
        (unless (symbol? (@0 bind-pair))
          (error "'let' binding pair must contain a symbol as first element" bind-pair)))
      (compile-let-block
       ctx T gtx
       var-binds
       (lambda (ctx T gtx)
         (s1-begin T ctx (drop args 2)))))))
;----------------------------------------------------------------------------

(add-syntax
  'define
  (lambda (ctx args T gtx)
    (define is-root-env?
      (@" IS-ROOT-ENV " (env: ctx)))
    (define is-coroutine?
      (if (eqv? (@1 args) :coroutine)
        (begin
          (set! args (append 'define (drop args 2)))
          #true)
        #false))
    (case (type (@1 args))
      ((symbol) (unless (= (length args) 3)
                  (error (str "'define' needs exactly 2 arguments if "
                              "first is a symbol")
                         args))
                (let ((var-name (@1 args))
                      (var        nil)
                      (var-s1-sym nil))
                  (if is-root-env?
                    (begin
                      (set! var-s1-sym '#1#glob-var)
                      (let ((glob-reg-idx (length (@" REGS " (env: ctx)))))
                        (push! (@" REGS " (env: ctx)) nil)
                        (set! var [glob-var: var-name glob-reg-idx])))
                    (begin
                      (set! var-s1-sym '#1#var)
                      (let ((new-var-name (gtx-gensym gtx var-name)))
                        (push! (let-vars: ctx) new-var-name)
                        (set! var [var: new-var-name var-name]))))
                  (@!var-name (env: ctx) var)
                  ['#1#set! (append var-s1-sym (drop var 1))
                   (T (assign ctx [lambda-name: var-name])
                      (@2 args))]))
      ((list) (unless (> (length args) 2)
                (error (str "'define' for function define needs "
                            "at least 3 arguments")
                       args))
              (do-each (s (@1 args))
                (unless (symbol? s)
                  (error (str "'define' for function requires the "
                              "first argument be a list only "
                              "of symbols")
                         (@1 args))))
              (let ((func-name      (@0 (@1 args)))
                    (var-s1-sym     nil)
                    (var            nil))
                (if is-root-env?
                  (begin
                    (set! var-s1-sym '#1#glob-var)
                    (let ((glob-reg-idx (length (@" REGS " (env: ctx)))))
                      (push! (@" REGS " (env: ctx)) nil)
                      (set! var [glob-var: func-name glob-reg-idx])))
                  (begin
                    (set! var-s1-sym '#1#var)
                    (let ((new-var-name (gtx-gensym gtx func-name)))
                      (push! (let-vars: ctx) new-var-name)
                      (set! var [var: new-var-name func-name]))))
                (@!func-name (env: ctx) var)
                ['#1#set! (append var-s1-sym (drop var 1))
                 (T (assign ctx [lambda-name: func-name])
                    (.AM gtx
                         (if is-coroutine?
                           (append
                             'lambda
                             :coroutine
                             (.AM gtx [(drop (@1 args) 1)])
                             (drop args 2))
                           (append
                             'lambda
                             (.AM gtx [(drop (@1 args) 1)])
                             (drop args 2)))))]))
      (else
        (error "'define' unexpected first argument" args)))))
;----------------------------------------------------------------------------

(add-syntax
  'define-macro
  (lambda (ctx args T gtx)
    (unless (> (length args) 2)
      (error "'define-macro' needs at least 2 arguments" args))
    (define params (@1 args))
    (unless (list? params)
      (error "'define-macro' first argument needs to be a parameter list"
             params))
    (do-each (v params)
      (unless (symbol? v)
        (error "'define-macro' parameter list must consist only of symbols"
               params)))
    (define macro-name (first params))
    (define macro-func
      (eval (.AM gtx (append ['lambda (drop params 1)]
                             (drop args 2)))))
    (@!macro-name (env: ctx)
                  [macro: macro-func macro-name])
    (.AM gtx ['#1#nil])))
;----------------------------------------------------------------------------

(add-syntax
  'include
  (lambda (ctx args T gtx)
    (unless (= (length args) 2)
      (error "'include' needs exactly 1 argument" args))
    (let ((include-file-path (str (include-dir: ctx)
                                  (sys-path-separator)
                                  (@1 args)))
          (include-content (sys-slurp-file
                             include-file-path))
          (read-data       (read-str include-content
                                     include-file-path))
          (new-ctx (assign ctx
                           [include-dir:
                             (first (sys-path-split
                                      include-file-path))])))
      (with-cleanup
        (push! (meta-stack: gtx) [include-file-path 1])
        (pop! (meta-stack: gtx))
        (s1-begin T new-ctx read-data)))))
;----------------------------------------------------------------------------

(add-syntax
  '$define!
  (lambda (ctx args T gtx)
     (unless (> (length args) 3)
       (error "'$define!' needs at least 3 arguments" atom))
     (unless (list? (@2 args))
       (error "'$define!' second argument needs to be a list" atom))
     (unless (> (length (@2 args)) 0)
       (error "'$define!' second argument list needs at least 1 symbol" atom))
     (do-each (v (@2 args))
       (unless (symbol? v)
         (error
           "'$define!' parameter list may only contain symbols"
           (@2 args))))
    ['#1#set method:
     ['#1#data (first (@2 args))]
     (T ctx (@1 args))
     (T (assign ctx [lambda-name: (first (@2 args))])
        (.AM
          gtx
          (append
            'lambda
            (.AM gtx [(drop (@2 args) 1)])
            (drop args 3))))]))
;----------------------------------------------------------------------------

(bkl-set-doc! 'do-each
#q|
@iterative syntax (do-each (_val-sym_ _list-expr_) _sequence_)
@iterative syntax (do-each (_key-sym_ _value-sym_ _map-expr_) _sequence_)

The first version with just the _val-sym_ iterates over the value of
_list-expr_, which must either be a list or a map,
binding the variable _val-sym_ to the current item (list element or map value)
and executing _sequence_ for each item.

    (let ((non-zero-vals []))
        (do-each (v [ 0 322 0 493 0 12 212 3 40 ])
            (when (not (zero? v))
                (push! non-zero-vals v)))
        non-zero-vals)
    ;=> (322 493 12 212 3 40)

The second form with _key-sym_ iterates over like the first, except that
_key-sym_ is bound to the list index or the map key for the corresponding
value.

    (let ((keys []) (vals []))
        (do-each (k v { :a 10 :b 20 :c 30 })
            (push! keys k)
            (push! vals v))
        keys)
    ;=> (:a :b :c)
|)
(add-syntax
  'do-each
  (lambda (ctx args T gtx)
    (unless (> (length args) 2)
      (error "'do-each' needs at least 2 arguments" args))
    (define iter-desc (@1 args))
    (unless (list? iter-desc)
      (error
        (str "first argument to 'do-each' "
             "needs to be an iteration description list")
        args))
    (when (< (length iter-desc) 2)
      (error
        "iteration description must be at least 2 elements long"
        iter-desc))
    (when (> (length iter-desc) 3)
      (error
        "iteration description too long (2 or 3 elements allowed)"
        iter-desc))
    (unless (symbol? (@0 iter-desc))
      (error
        "key bind name of iteration description must be a symbol"
        iter-desc));
    (define obj-atom (@1 iter-desc))
    (if (eqv? (length iter-desc) 3)
      (begin
        (define obj-atom (@2 iter-desc))
        (unless (symbol? (@1 iter-desc))
          (error "value bind name of iteration description must be a symbol"
                 iter-desc))
        (define obj (T ctx obj-atom))
        (compile-let-block
          ctx T gtx
          (.AM gtx [[(@0 iter-desc) nil]
                    [(@1 iter-desc) nil]])
          (lambda (ctx T gtx)
            ['#1#do-each
             [(T ctx (@1 iter-desc))
              (T ctx (@0 iter-desc))]
             obj
             (s1-begin T ctx (drop args 2))])))
      (begin
        (define obj (T ctx obj-atom))
        (compile-let-block
          ctx T gtx
          (.AM gtx [[(@0 iter-desc) nil]])
          (lambda (ctx T gtx)
            ['#1#do-each
             [(T ctx (@0 iter-desc))]
             obj
             (s1-begin T ctx (drop args 2))]))))))
;----------------------------------------------------------------------------

(add-syntax
  'while
  (lambda (ctx args T gtx)
    (unless (> (length args) 2)
      (error "'while' needs at least 2 arguments (test and body)" args))
    ['#1#while
     (T ctx (@1 args))
     (s1-begin T ctx (drop args 2))]))
;----------------------------------------------------------------------------

(add-syntax
  'for
  (lambda (ctx args T gtx)
    (unless (> (length args) 2)
      (error "'for' needs at least 2 arguments (iterator desc and body)" args))
    (let ((iter-desc (@1 args)))
      (unless (or (= (length iter-desc) 3)
                  (= (length iter-desc) 4))
        (error "'for' iteration description needs 3 or 4 elements" iter-desc))
      (unless (symbol? (@0 iter-desc))
        (error "'for' iteration description needs a symbol as first elemetn"
               iter-desc))
      (compile-let-block
        ctx T gtx
         (.AM gtx [[(@0 iter-desc) (@1 iter-desc)]])
         (lambda (ctx T gtx)
           ['#1#for [(T ctx (@2 iter-desc))
                     (T ctx (if (nil? (@3 iter-desc))
                              1
                              (@3 iter-desc)))
                     (T ctx (@0 iter-desc))]
            (s1-begin T ctx (drop args 2))])))))
;----------------------------------------------------------------------------

(add-syntax
  'do
  (lambda (ctx args T gtx)
    (unless (> (length args) 2)
      (error "'do' needs at least 2 arguments (iterator binds, test and body)"
             args))
    (unless (list? (@1 args))
      (error "'do' first argument is not a list (iterator binds)"))
    (unless (list? (@2 args))
      (error "'do' second argument is not a list (test)"))
    (unless (> (length (@2 args)) 1)
      (error "'do' test needs a test expression and a return value expression"
             (@2 args)))
    (let ((iter-descs           (@1 args))
          (let-binds            [])
          (test-expr            (@0 (@2 args)))
          (test-end-block       (drop (@2 args) 1)))
      (do-each (iter-bind iter-descs)
        (unless (or (= (length iter-bind) 2)
                    (= (length iter-bind) 3))
          (error "'do' bad iterator bind, has not 3 elements" iter-bind))
        (unless (symbol? (@0 iter-bind))
          (error "'do' first element of iteration binding needs to be a symbol"
                 iter-bind))
        (push! let-binds [(@0 iter-bind) (@1 iter-bind)]))
      (compile-let-block
        ctx T gtx
        (.AM gtx let-binds)
        (lambda (ctx T gtx)
          (do-each (bind let-binds)
            (@!0 bind (T ctx (@0 bind))))
          (define step-exprs (.AM gtx []))
          (let ((i 0))
            (do-each (bind let-binds)
              (define iter (@i iter-descs))
              (define step
                (if (nil? (@2 iter))
                  (@0 bind)
                  (T ctx (@2 iter))))
              (push! step-exprs
                     (DI! iter ['#1#set! (@0 bind) step]))
              (set! i (+ i 1))))
          (if (> (length step-exprs) 1)
            (unshift! step-exprs '#1#begin)
            (set! step-exprs (first step-exprs)))
          ['#1#do
           (T ctx test-expr)
           (s1-begin T ctx test-end-block)
           step-exprs
           (s1-begin T ctx (drop args 3))])))))
;----------------------------------------------------------------------------

(add-syntax
  '.
  (lambda (ctx args T gtx)
    (unless (> (length args) 2)
      (error "method call needs at least 2 arguments (method & object)" args))
    (let ((method-name (@1 args))
          (obj         (@2 args))
          (m-args      (drop args 3)))
      (unless (or (symbol? method-name)
                  (keyword? method-name)
                  (string? method-name))
        (set! method-name (T ctx method-name)))
      (append
        '#1#method-call
        [method-name]
        [(T ctx obj)]
        (.AM gtx (map (lambda (v) (T ctx v)) m-args))))))
;----------------------------------------------------------------------------

(add-syntax
  'or
  (lambda (ctx args T gtx)
    (unless (> (length args) 1)
      (error "'or' needs at least one argument" args))
    (define tmp-var (gtx-gentmpsym gtx 'or))
    (define operand (@1 args))
    (define false-v (T ctx #f))
    (define build-sub-tree
      (lambda (rest-ops)
        (let ((next-rest-ops (drop rest-ops 1))
              (operand       (first rest-ops)))
          ['#1#begin
           ['#1#set! tmp-var (T ctx operand)]
           (.AM
             gtx
             (if (> (length next-rest-ops) 0)
               ['#1#if tmp-var tmp-var (build-sub-tree next-rest-ops)]
               ['#1#if tmp-var tmp-var false-v]))])))

    (compile-let-block
      ctx T gtx
      (.AM gtx [[tmp-var operand]])
      (lambda (ctx T gtx)
        (unless (list? tmp-var)
          (set! tmp-var (T ctx tmp-var)))
        (.AM gtx
             (if (> (length args) 2)
               ['#1#if tmp-var tmp-var (build-sub-tree (drop args 2))]
               ['#1#if tmp-var tmp-var false-v]))))))
;----------------------------------------------------------------------------

(add-syntax
  'and
  (lambda (ctx args T gtx)
    (unless (> (length args) 1)
      (error "'and' needs at least one argument" args))
    (define tmp-var (gtx-gentmpsym gtx 'and))
    (define operand (@1 args))
    (define false-v (T ctx #f))
    (define build-sub-tree
      (lambda (rest-ops)
        (let ((next-rest-ops (drop rest-ops 1))
              (operand       (first rest-ops)))
          ['#1#begin
           ['#1#set! tmp-var (T ctx operand)]
           (.AM
             gtx
             (if (> (length next-rest-ops) 0)
               ['#1#if tmp-var (build-sub-tree next-rest-ops) false-v]
               ['#1#if tmp-var tmp-var false-v]))])))
    (compile-let-block
      ctx T gtx
      (.AM gtx [[tmp-var operand]])
      (lambda (ctx T gtx)
        (unless (list? tmp-var)
          (set! tmp-var (T ctx tmp-var)))
        (.AM gtx
             (if (> (length args) 2)
               ['#1#if tmp-var (build-sub-tree (drop args 2)) false-v]
               ['#1#if tmp-var tmp-var false-v]))))))
;----------------------------------------------------------------------------

(add-syntax
  'cond
  (lambda (ctx arg T gtx)
    ; TODO: For 'case' and 'cond' it would be useful to extract the
    ;       debug meta info from the clauses, so we can have more 
    ;       precise error messages!
    (define else-clause nil)
    (define out ['#1#cond])
    (unless (> (length arg) 1)
      (error "'cond' clause must have at least one clause" arg))
    (do-each (clause (drop arg 1))
      (unless (list? clause)
        (error "'cond' has an improper clause (not a list)" clause))
      (when (< (length clause) 2)
        (error (str "'cond' clauses must at least contain a test "
                    "expression and result expression")
               clause))
      (if (eqv? (@0 clause) 'else)
        (begin
          (when else-clause
            (error "'cond' must not have more than one 'else' clause" clause))
          (set! else-clause clause))
        (push!
          out
          (if (eqv? (@1 clause) '=>)
            (let ((tmp-var (gtx-gentmpsym gtx 'cond)))
              (compile-let-block
                ctx T gtx
                (.AM gtx [[tmp-var (first clause)]])
                (lambda (ctx T gtx)
                  (set! tmp-var (T ctx tmp-var))
                  [clause:
                    tmp-var
                    (DI! (@2 clause)
                         ['#1#apply
                          (T ctx (@2 clause))
                          [tmp-var]])])))
            [clause:
              (T ctx (first clause))
              (DI! clause (s1-begin T ctx (drop clause 1)))]))))
    (if else-clause
      (push! out [else: (s1-begin T ctx (DI! else-clause (drop else-clause 1)))])
      (push! out [else: (T ctx nil)]))
    out))
;----------------------------------------------------------------------------

(add-syntax
  'case
  (lambda (ctx arg T gtx)
    ; TODO: For 'case' and 'cond' it would be useful to extract the
    ;       debug meta info from the clauses, so we can have more 
    ;       precise error messages!
    (define else-clause nil)
    (when (< (length arg) 3)
      (error "'case' needs at least 2 arguments" arg))
    (let ((all-values {}))
      (do-each (clause (drop arg 2))
        (if (eqv? (first clause) 'else)
          (begin
            (when else-clause
              (error "'case' duplicated else clause" clause))
            (set! else-clause clause))
          (begin
            (when (not (list? (first clause)))
              (error "'case' clause first element is not a list" clause))
            (do-each (element (first clause))
              (if (@element all-values)
                (error "'case' with duplicate value" element))
              (@!element all-values #t)))))
    (let ((key-value (@1 arg))
          (tmp-var (gtx-gentmpsym gtx 'case)))
      (compile-let-block
        ctx T gtx
        (.AM gtx [[tmp-var key-value]])
        (lambda (ctx T gtx)
          (set! tmp-var (T ctx tmp-var))
          (define out-cond ['#1#cond])
          (do-each (clause (drop arg 2))
            (unless (eqv? (first clause) 'else)
              (if (eqv? (@1 clause) '=>)
                (begin
                  (do-each (element (first clause))
                    (begin
                      (push! out-cond
                             [clause:
                               (DI!
                                 (first clause)
                                 ['#1#eqv tmp-var (.S1-T-Q gtx ctx element)])
                               (DI! clause
                                    ['#1#apply
                                     (T ctx (@2 clause))
                                     [tmp-var]])]))))
                (let ((expr-block
                        (s1-begin T ctx (DI! clause (drop clause 1)))))
                  (do-each (element (first clause))
                    (begin
                      (push! out-cond
                             [clause:
                               ['#1#eqv tmp-var (.S1-T-Q gtx ctx element)]
                               expr-block])))))))
          (when else-clause
            (push! out-cond
              (if (eqv? (@1 else-clause) '=>)
                [else: (DI!
                         else-clause
                         ['#1#apply
                          (T ctx (@2 else-clause))
                          [tmp-var]])]
                [else: (s1-begin T ctx (DI!
                                         else-clause
                                         (drop else-clause 1)))])))
          out-cond))))))
;----------------------------------------------------------------------------

(define eval-syntax
  (lambda (ctx arg T gtx)
    (when (> (length arg) 3)
      (error "Too many arguments to 'eval'" arg))
    (when (< (length arg) 2)
      (error "Too few arguments to 'eval'" arg))
    (if (= (length arg) 2)
      ['#1#eval (T ctx (@1 arg))]
      ['#1#eval (T ctx (@1 arg)) (T ctx (@2 arg))])))
;----------------------------------------------------------------------------

