(include "compiler/transformator.bkl")

;----------------------------------------------------------------------------
(define DI!
  (lambda (src to)
    (when (bkl-get-meta src)
      (bkl-set-meta to 0 (@0 (bkl-get-meta src))))
    to))

;----------------------------------------------------------------------------

(define lookup-in-env
  (lambda (env sym transform-src-env-fn env-stck)
    (if (nil? env)
      nil
      (let ((v (@sym env)))
        (if (nil? v)
          (lookup-in-env (@" PARENT " env)
                         sym
                         transform-src-env-fn
                         (begin
                           (push! env-stck env)
                           env-stck))
          (begin
            (when (not (nil? transform-src-env-fn))
              (transform-src-env-fn sym v env env-stck))
            [v env]))))))
;----------------------------------------------------------------------------

(define S1-ROOT-ENV {})
(define SYNTAXES [])
(define OPTIMIZED-PRIMS [])

(define add-syntax
  (lambda (sym fn)
    (push! SYNTAXES fn)
    (@!sym S1-ROOT-ENV [syntax: (- (length SYNTAXES) 1)])))

(define add-optimized-prim
  (lambda (root-env prim-k compile-func)
    (push! OPTIMIZED-PRIMS compile-func)
    (let ((var (@prim-k root-env)))
      (when (nil? var)
        (error "Unknown primitive to optimize" prim-k))
      (@!2 var (- (length OPTIMIZED-PRIMS) 1)))))

;----------------------------------------------------------------------------

(define stage-1-transformation-quote-matches
  {(string->symbol "nil") (lambda (ctx arg T gtx) ['#s1#nil])
   'boolean  (lambda (ctx arg T gtx) ['#s1#data arg])
   'number   (lambda (ctx arg T gtx) ['#s1#data arg])
   'exact    (lambda (ctx arg T gtx) ['#s1#data arg])
   'inexact  (lambda (ctx arg T gtx) ['#s1#data arg])
   'symbol   (lambda (ctx arg T gtx) ['#s1#data arg])
   'keyword  (lambda (ctx arg T gtx) ['#s1#data arg])
   'string   (lambda (ctx arg T gtx) ['#s1#data arg])
   'map
     (lambda (ctx arg T gtx)
       (let ((o-map ['#s1#map]))
         (do-each (k v arg)
           (push!
             o-map
             (.AM gtx [(.S1-T-Q gtx ctx k)
                       (.S1-T-Q gtx ctx v)])))
         o-map))
   'list
     (lambda (ctx arg T gtx)
       (append '#s1#list
               (map (lambda (v)
                      (.S1-T-Q gtx ctx v))
                    arg)))})

(define stage1-transformator-quote
  (lambda (data ctx gtx)
    (find-transform-match
      stage-1-transformation-quote-matches
      data
      ctx
      gtx
      #t)))
;----------------------------------------------------------------------------

(define annotate-upvalue-use
  (lambda (sym var src-env env-stck)
    (unless (@" IS-ROOT-ENV " src-env)
      (define found-lambda-head #f)
      (define lambda-upv-list nil)
      (do-each (e env-stck)
        (when (not (nil? (@" LAMBDA-UPV " e)))
          (when (eqv? (@0 var) var:)
            (@!(@1 var) (@" LAMBDA-UPV " e) #t))
          (set! found-lambda-head #t)))
      (when (and found-lambda-head
                 (eqv? (@0 var) var:))
        (when (nil? (@" UPV " src-env))
          (@!" UPV " src-env {}))
        (@!(@1 var) (@" UPV " src-env) #t)))))
;----------------------------------------------------------------------------

(define keys-in-map
  (lambda (m)
    (define keys [])
    (do-each (k v m)
      (push! keys k))
    keys))

(define found-upv-in-env?
  (lambda (env)
    (not (or (nil? (@" UPV " env))
             (= (length (@" UPV " env)) 0)))))

(define upvalues-in-env
  (lambda (env)
    #;(displayln UPV: (@" UPV " env))
    (keys-in-map (@" UPV " env))))
;----------------------------------------------------------------------------

(define post-optimize-apply
 (lambda (ctx T gtx apply-tree)
   (if (and (eqv? (@0 apply-tree)      '#s1#apply)
            (eqv? (@0 (@1 apply-tree)) '#s1#prim))
     (begin
       (case (@1 (@1 apply-tree))
         ((list) (.AM gtx (append '#s1#list (@2 apply-tree))))
         (else apply-tree)))
     apply-tree)))
;----------------------------------------------------------------------------

(define stage-1-transformation-matches
  {(string->symbol "nil")      (lambda (ctx arg T gtx) ['#s1#nil])
   'boolean  (lambda (ctx arg T gtx) ['#s1#data arg])
   'number   (lambda (ctx arg T gtx) ['#s1#data arg])
   'exact    (lambda (ctx arg T gtx) ['#s1#data arg])
   'inexact  (lambda (ctx arg T gtx) ['#s1#data arg])
   'string   (lambda (ctx arg T gtx) ['#s1#data arg])
   'keyword  (lambda (ctx arg T gtx) ['#s1#data arg])
   'map
     (lambda (ctx arg T gtx)
       (define o-map ['#s1#map])
       (do-each (k v arg)
         (push! o-map (.AM gtx [(T ctx k) (T ctx v)])))
       o-map)
   'symbol
     (lambda (ctx arg T gtx)
       (let ((lookup-res (lookup-in-env (env: ctx) arg annotate-upvalue-use []))
             (value (if lookup-res (@0 lookup-res) nil)))
         (when (nil? value)
           (error (str "Access undefined variable '" arg "'")
                  (last (meta-stack: gtx))))
         (case (@0 value)
           ((var:)      ['#s1#var (@1 value) (@2 value)])
           ((glob-var:) ['#s1#glob-var (@1 value) (@2 value)])
           ((prim:)     ['#s1#prim (@1 value)])
           ((syntax:)
            (error "Variable contains syntax directive, can't use it here" value))
           ((macro:)
            (error "Variable contains macro, can't use it here" value))
           (else
             (error "Variable contains non representable value" value)))))
   'list
     (lambda (ctx arg T gtx)
       (case (type (@0 arg))
         ((keyword)
          (when (> (length arg) 2)
            (error "Get by keyword can only have one argument (the map)"
                   arg))
          ['#s1#get (T ctx (@0 arg)) (T ctx (@1 arg))])
         ((list)
          (post-optimize-apply ctx T gtx
                               ['#s1#apply
                                (T ctx (@0 arg))
                                (.AM gtx (map (lambda (v) (T ctx v))
                                              (drop arg 1)))]))
         ((symbol)
          (let ((lookup-res (lookup-in-env (env: ctx) (@0 arg) annotate-upvalue-use []))
                (value (if lookup-res (@0 lookup-res) nil)))
            (when (nil? value)
              (error (str "Access undefined variable '" (@0 arg) "'")
                     (last (meta-stack: gtx))))
            (case (@0 value)
              ((syntax:)
                ((@(@1 value) SYNTAXES) ctx arg T gtx))
              ((macro:)
               (let ((transformed
                       (apply (@1 value) (drop arg 1))))
                 (T ctx transformed)))
              ((prim:)
               (if (nil? (@2 value))
                 (post-optimize-apply ctx T gtx
                                      ['#s1#apply
                                       (.AM gtx ['#s1#prim (@1 value)])
                                       (.AM gtx (map (lambda (v) (T ctx v))
                                                     (drop arg 1)))])
                 ((@(@2 value) OPTIMIZED-PRIMS) ctx arg T gtx)))
              ((var:)
               ['#s1#apply
                (.AM gtx ['#s1#var (@1 value) (@2 value)])
                (.AM gtx (map (lambda (v) (T ctx v))
                              (drop arg 1)))])
              ((glob-var:)
               ['#s1#apply
                (.AM gtx ['#s1#glob-var (@1 value) (@2 value)])
                (.AM gtx (map (lambda (v) (T ctx v))
                              (drop arg 1)))])
              (else
                (error "Unknown content in env" [arg value])))))
         (else (error "Unknown element type in front of list"
                      (type (@0 arg))
                      arg))))})

(define stage1-transformator
  (lambda (data root-env gtx)
    (@!'S1-T-Q gtx (lambda (ctx v)
                     (stage1-transformator-quote v ctx gtx)))
    (@!'S1-T   gtx (lambda (ctx v)
                     (stage1-transformator v ctx gtx)))
    (find-transform-match
      stage-1-transformation-matches
      data
      root-env
      gtx
      #t)))
;----------------------------------------------------------------------------

(define gtx-gensym
  (lambda (gtx name)
    (let ((sym (string->symbol (str name "_" (gensym-counter: gtx)))))
      (@!var-counter: gtx (+ 1 (gensym-counter: gtx)))
      sym)))
;----------------------------------------------------------------------------

(define gtx-gentmpsym
  (lambda (gtx name)
    (string->symbol (str (gtx-gensym gtx name) "_t"))))
;----------------------------------------------------------------------------

(define s1-begin
  (lambda (T ctx exprs)
    (if (= (length exprs) 0)
      (T ctx nil)
      (if (= (length exprs) 1)
        (T ctx (@0 exprs))
        (append '#s1#begin
                (map (lambda (v)
                       (T ctx v))
                     exprs))))))
;----------------------------------------------------------------------------

(define parse-lambda-params
  (lambda (params error-fn)
    (if (symbol? params)
      { varargs-param: params args: [] }
      (if (list? params)
        (begin
          (define found-dot? #f)
          (define args [])
          (define va-arg nil)
          (do-each (s params)
            (if (symbol? s)
              (if found-dot?
                (if (nil? va-arg)
                  (set! va-arg s)
                  (error-fn "There can only be one vararg parameter" s))
                (if (eqv? s '.)
                  (set! found-dot? #t)
                  (push! args s)))
              (error-fn "Function parameter is not a symbol" s)))
          {varargs-param: va-arg
          args:          args})
        (error-fn "Function parameter is neither a list or a symbol" params)))))
;----------------------------------------------------------------------------

(define init-root-env
  (lambda (root-env)
    (do-each (k v S1-ROOT-ENV)
      (@!k root-env v))
    (when (nil? (@" REGS " root-env))
      (@!" REGS " root-env []))
    root-env))

(define spawn-root-env
  (lambda ()
    (define root-env {})
    (init-root-env root-env)))

(define get-root-env-var
  (lambda (root-env sym)
    (let ((var (@sym root-env)))
      (if var
        (if (eqv? (first var) glob-var:)
          (let ((reg-idx (@2 var)))
            (@reg-idx (@" REGS " root-env)))
          nil)
        nil))))

(define set-root-env-var
  (lambda (root-env sym content)
    (let ((var      (@sym root-env))
          (reg-idx  nil))
      (if var
        (if (eqv? (first var) glob-var:)
          (set! reg-idx (@2 var))
          (begin
            (set! var [glob-var: sym])
            (@!sym root-env var)))
        (set! var [glob-var: sym]))
      (unless reg-idx
        (when (nil? (@" REGS " root-env))
          (@!" REGS " root-env []))
        (set! reg-idx (length (@" REGS " root-env))))
      (@!sym root-env var)
      (@!reg-idx (@" REGS " root-env) content)
      (@!2 var reg-idx))))

(do-each (k v (bkl-primitive-map))
  (@!k S1-ROOT-ENV [prim: k]))

(include "compiler/stage1_opt_prim.bkl")

(include "compiler/stage1_syntax.bkl")

(@!" IS-ROOT-ENV " S1-ROOT-ENV #t)
