(define map
  (lambda (fn data)
    (define out [])
    (do-each (v data)
      (push! out (fn v)))
    out))

(define compiler-error
  (lambda (gtx ctx atom error-message)
    (raise
      ['BKL-ERROR-OBJ
       error-message
       atom
       (str "Compilation error: "
            error-message
            " (atom: " (write-str atom) ")")
       (let ((file-pos (last (meta-stack: gtx))))
;         (when (nil? file-pos)
;           (set! file-pos ["unknown" 0]))
         [(if (or (nil? ctx)
                  (nil? (lambda-name: ctx)))
            (if (> (length file-pos) 2)
              ["code"
               (@0 file-pos)
               (@1 file-pos)
               (@2 file-pos)]
              ["code"
               (@0 file-pos)
               (@1 file-pos)
               unknown:])
            ["code"
             (@0 file-pos)
             (@1 file-pos)
             (lambda-name: ctx)])])])))
