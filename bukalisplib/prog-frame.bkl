(define make-prog-frame
 (lambda ()
   (let ((self { pad:               []
                 stack:             []
                 debug-info-stack:  []
                 debug-pos:         nil
                 debug-info:        {} }))

     ($define! self (push-prog-frame)
       (push! ($stack: self) ($pad: self))
       ($!pad: self []))

     ($define! self (pop-prog-frame)
       ($!pad: self (pop! ($stack: self))))

     ($define! self (push-debug-info info)
       (push! ($debug-info-stack: self) ($debug-info: self))
       ($!debug-info: self info))

     ($define! self (pop-debug-info)
       ($!debug-info: self (pop! ($debug-info-stack: self))))

     ($define! self (set-debug-pos atom)
       (let ((info (@(atom-id atom) ($debug-info: self))))
         (unless (nil? info)
           ($!debug-pos: self info))))

     ($define! self (store-static-data data)
       (push! ($pad: self) data)
       [(- (length ($pad: self)) 1) -1])

     ($define! self (make-code-pad)
        (make-code-pad-object self))

     ($define! self (to-vm-prog code-pad)
        (make-vm-prog [($pad:  self)
                       (.to-vm-prog-code       code-pad)
                       (.to-vm-prog-debug-info code-pad)]))

     self)))
