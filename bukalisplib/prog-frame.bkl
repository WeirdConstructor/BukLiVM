(define make-prog-frame
 (lambda ()
   (let ((self { pad:               []
                 stack:             []
                 cur-file-stack:    []
                 define-name-stack: []
                 debug-pos-stack:   []
                 env-pos-stack:     [] }))

     ($define! self (init-root-env-pos-allocation max-pos)
       (push! ($env-pos-stack: self) [max-pos []]))

     ($define! self (push-prog-frame)
       (push! ($env-pos-stack: self) [0 []])
       (push! ($stack: self) ($pad: self))
       ($!pad: self []))

    ($define! self (cur-env-size)
      (+ 1 (@0 (last ($env-pos-stack: self)))))

     ($define! self (pop-prog-frame)
       (pop! ($env-pos-stack: self))
       ($!pad: self (pop! ($stack: self))))

     ($define! self (push-current-file path)
       (push! ($cur-file-stack: self) path))

     ($define! self (pop-current-file)
       (pop! ($cur-file-stack: self)))

     ($define! self (push-define-name-info name)
       (push! ($define-name-stack: self) name))

     ($define! self (get-current-file)
       (last ($define-name-stack: self)))

     ($define! self (pop-define-name-info name)
       (pop! ($define-name-stack: self)))

    ($define! self (new-tmp-pos)
      (let ((env-pos (last ($env-pos-stack: self)))
            (free-tmp-pos-list (@1 env-pos)))
        (if (> (length free-tmp-pos-list) 0)
          [(pop! free-tmp-pos-list) 0 tmp:]
          (let ((new-pos (@0 env-pos)))
            (@!0 env-pos (+ new-pos 1))
            [new-pos 0 tmp:]))))

    ($define! self (new-pos)
      (let ((env-pos (last ($env-pos-stack: self)))
            (new-pos (@0 env-pos)))
        (@!0 env-pos (+ 1 new-pos))
        [new-pos 0]))

    ($define! self (recycle-pos pos)
      (when (eqv? (@2 pos) tmp:)
        (push! (@1 (last ($env-pos-stack: self)))
          (if (list? pos)
            (@0 pos)
            pos)))
      pos)

     ($define! self (push-debug-info atom)
       (let ((meta-info (bkl-get-meta atom))
             (debug-info (if (nil? meta-info) nil (@0 meta-info))))
         (push! ($debug-pos-stack: self)
                (if (nil? debug-info)
                  nil
                  [(@0 debug-info)
                   (@1 debug-info)
                   (last ($define-name-stack: self))]))
         #;(displayln PUSH-DEBUG-INFO: ($debug-pos-stack: self))))

     ($define! self (pop-debug-info)
       (pop! ($debug-pos-stack: self)))

     ($define! self (get-debug-info-trace)
       (define to-trace-info
         (lambda (info)
           (if (nil? info)
             ["compiler" nil nil nil]
             ["compiler" (@0 info) (@1 info) (@2 info)])))
       (define trace [])
       (define add-trace-info
         (lambda (info)
           (when (not (nil? info))
             (push! trace (to-trace-info info)))))
       (unless (eqv? (length ($debug-pos-stack: self)) 0)
         (define info nil)
         (if (eqv? (length ($debug-pos-stack: self)) 1)
           (add-trace-info (last ($debug-pos-stack: self)))
           (for (i (- (length ($debug-pos-stack: self)) 1) 0 -1)
             (add-trace-info (@i ($debug-pos-stack: self))))))
       trace)

     ($define! self (get-debug-info)
       (unless (eqv? (length ($debug-pos-stack: self)) 0)
         (define info nil)
         (if (eqv? (length ($debug-pos-stack: self)) 1)
           (set! info (last ($debug-pos-stack: self)))
           (for (i (- (length ($debug-pos-stack: self)) 1) 0 -1)
             (unless info
               (set! info (@i ($debug-pos-stack: self))))))
         info))

     ($define! self (store-static-data data)
       (push! ($pad: self) data)
       [(- (length ($pad: self)) 1) -1])

     ($define! self (make-code-pad)
        (make-code-pad-object self))

     ($define! self (to-vm-prog code-pad)
        (make-vm-prog [($pad:  self)
                       (.to-vm-prog-code       code-pad)
                       (.to-vm-prog-debug-info code-pad)]))

     self)))
