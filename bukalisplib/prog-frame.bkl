(define make-prog-frame
 (lambda ()
   (let ((self { pad:               []
                 stack:             []
                 debug-pos-stack:   [] }))

     ($define! self (push-prog-frame)
       (push! ($stack: self) ($pad: self))
       ($!pad: self []))

     ($define! self (pop-prog-frame)
       ($!pad: self (pop! ($stack: self))))

     ($define! self (push-debug-info atom)
       (let ((meta-info (bkl-get-meta atom))
             (debug-info (if (nil? meta-info) nil (@0 meta-info))))
         (push! ($debug-pos-stack: self) debug-info)
         #;(displayln PUSH-DEBUG-INFO: ($debug-pos-stack: self))))

     ($define! self (pop-debug-info)
       (pop! ($debug-pos-stack: self)))

     ($define! self (get-debug-info)
       (unless (eqv? (length ($debug-pos-stack: self)) 0)
         (define info nil)
         (for (i (- (length ($debug-pos-stack: self)) 1) 0 -1)
           (unless info
             (set! info (@i ($debug-pos-stack: self)))))
         info))

     ($define! self (store-static-data data)
       (push! ($pad: self) data)
       [(- (length ($pad: self)) 1) -1])

     ($define! self (make-code-pad)
        (make-code-pad-object self))

     ($define! self (to-vm-prog code-pad)
        (make-vm-prog [($pad:  self)
                       (.to-vm-prog-code       code-pad)
                       (.to-vm-prog-debug-info code-pad)]))

     self)))
