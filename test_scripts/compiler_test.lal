(define t
  (lambda (code expected)
    (let ((r (invoke-compiler code)))
      (if (eqv? r expected)
        (displayln (str "OK - " code))
        (error (str "Test failed: " code ", returned: " r " != " expected))))))

(define T
  (lambda (code expected)
    (let ((r (invoke-compiler [code])))
      (if (eqv? r expected)
        (displayln (str "OK - " code))
        (error (str "Test failed: " code ", returned: " r " != " expected))))))

(t "123"        123)
(t "(+ 123)"    123)
(t "(+ 1 123)"  124)
(t "(define x 12) (define y 34) (+ x y)" 46)

(T '123         123)
(T '(+ 123)     123)
(T '(+ 1 123)   124)
(t '((define x 12)
     (define y 34)
     (+ x y))
   46)
(T '(begin
      (define x 12)
      (define y 34)
      (+ x y))
   46)
(t '((define x 12)
     (set! x (+ 14.5 x)))
   26.5)
(t '((define x +)
     (set! x (x 1.5 1)))
   2.5)

(T '(* 2 3 4)          24)
(T '(> (atom-id []) 0) #true)

(displayln "ALL OK")
::
