
(define t
  (lambda (code expected)
    (let ((r (invoke-compiler code)))
      (if (eqv? r expected)
        (displayln (str "OK - " code))
        (error (str "Test failed: " code ", returned: " r " != " expected))))))

(define T
  (lambda (code expected)
    (let ((r (invoke-compiler [code])))
      (if (eqv? (write-str r) (write-str expected))
        (displayln (str "OK - " code))
        (error (str "Test failed: " code ", returned: " r " != " expected))))))

(t "123"        123)
(t "(+ 123)"    123)
(t "(+ 1 123)"  124)
(t "(define x 12) (define y 34) (+ x y)" 46)

(T '123         123)
(T '(+ 123)     123)
(T '(+ 1 123)   124)
(t '((define x 12)
     (define y 34)
     (+ x y))
   46)
(T '(begin
      (define x 12)
      (define y 34)
      (+ x y))
   46)
(t '((define x 12)
     (set! x (+ 14.5 x)))
   26.5)
(t '((define x +)
     (set! x (x 1.5 1)))
   2.5)

(T '(* 2 3 4)          24)
(T '(> (atom-id []) 0) #true)

(T '((lambda (x)   (+ x 1)) 1.5) 2.5)
(T '((lambda (x y) (+ (* x y) 1)) 1.5 4) 7.0)
(T '((lambda (x y) (+ (* x y) 1)) 1.5 4 e: r: g:) 7.0)
(T '((lambda (x)
       ((lambda (y) (+ x y))
        10))
     5)
   15)

(T '((lambda (x)
       ((lambda (y) (+ 1 0 3 30 30 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10)
       ((lambda (y) (+ 1 x y)) 10))
     5) 16)

(T '(begin (define y 30) y) 30)
(T '(begin (define x 12)
           (define y 30)
           (set! y 10)
           y) 10)

(T 'a: a:)
(T '[1 2 3] '(1 2 3))
(T '{x: 12} {x: 12})
(T ''{x: 12} {x: 12})
(T '{x: (+ 6 2)} {x: 8})
(T ''(1 2 3) '(1 2 3))
(T ''(eq? 1 2) '(eq? 1 2))

(T '(+ 1 2 3) 6)
(T '(+ 1.2 2 3) 6.2)
(T '(* 1.2 2 3) 7.2)
(T '(/ 8 2 2) 2)
(T '(/ 5 2) 2)
(T '(- 10.5 1.3 2.2) 7)
(T '(< 1 2) #true)
(T '(> 1 2) #false)
(T '(<= 1 2) #true)
(T '(<= 1 2) #true)
(T '(<= 2 2) #true)
(T '(<= 2.1 2) #false)
(T '(>= 2.1 2) #true)

(T '(eqv? #t #t) #true)
(T '(eqv? #f #f) #true)
(T '(eqv? #t #f) #false)

(T '(eqv? a: a:) #true)
(T '(eqv? a: b:) #false)

(T '(eqv? 'a 'a) #true)
(T '(eqv? 'a 'b) #false)

(T '(eqv? 2 (/ 4 2)) #true)
(T '(eqv? 2 (/ 4.0 2.0)) #false)
(T '(eqv? 2.0 (/ 4.0 2.0)) #true)

(T '(eqv? [] []) #false)
(T '(eqv? {} {}) #false)
(T '(eqv? { x: 11 } { x: 10 }) #false)
(T '(eqv? 2 (/ 5 2)) #true)
(T '(eqv? 2 (/ 5.0 2)) #false)
(T '(eqv? #f 0) #false)
(T '(eqv? #f []) #false)
(T '(eqv? 2.0 2) #false)

(displayln "ALL OK")
::
